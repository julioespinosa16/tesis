

%	PREÁMBULO
%----------------------------------------------------------------------------------------
\mathchardef\period=\mathcode`.
\documentclass[11pt, oneside]{book}



\usepackage[paperwidth=17cm, paperheight=22.5cm, bottom=2.5cm, right=2.5cm]{geometry}
% El borde inferior puede parecerles muy amplio a la vista. Les recomiendo hacer una prueba de impresión antes para ajustarlo

\usepackage{amssymb,amsmath,amsthm} % Símbolos matemáticos
\usepackage[spanish, es-nodecimaldot]{babel}
\usepackage[utf8]{inputenc} % Acentos y otros símbolos 
\usepackage{enumerate}
\usepackage{hyperref} % Hipervínculos en el índice
\usepackage{breakurl} % To break URLs
\usepackage{graphicx}
\usepackage{dirtytalk}
\usepackage{caption}

\newcommand\floor[1]{\lfloor#1\rfloor}
\newcommand\ceil[1]{\lceil#1\rceil}



%\usepackage{subfig} % Subfiguras
%\usepackage{etoolbox}
\graphicspath{{Imagenes/}} % En qué carpeta están las imágenes

% Para eliminar guiones y justificar texto
\tolerance=1
\emergencystretch=\maxdimen
\hyphenpenalty=10000
\hbadness=10000

\linespread{1.25} % Asemeja el interlineado 1.5 de Word

\let\oldfootnote\footnote % Deja espacio entre el número del pie de página y el inicio del texto
\renewcommand\footnote[1]{%
\oldfootnote{\hspace{0.05mm}#1}}

\renewcommand{\thefootnote} {\textcolor{Black}{\arabic{footnote}}} % Súperindice a color negro

\setlength{\footnotesep}{0.75\baselineskip} % Espaciado entre notas al pie

\usepackage{fnpos} % Footnotes al final de pág.

\usepackage[justification=centering, font=bf, labelsep=period, skip=5pt]{caption} % Centrar captions de tablas y ponerlas en negritas

\newcommand{\imagesource}[1]{{\footnotesize Fuente: #1}}
\newcommand{\vrb}{ \st \bf \small}
\usepackage{tabularx} % Big tables
\usepackage{graphicx}
\usepackage{adjustbox}
\usepackage{longtable}
\usepackage{outlines} % Pro lists
\usepackage{float} % Float tables
\usepackage[usenames,dvipsnames]{xcolor} % Color
\usepackage{pgfplots} % Gráficas


\newcommand{\cmark}{\ding{51}}%
\newcommand{\xmark}{\ding{55}}%
\usepackage{subcaption}



\pgfplotsset{compat=newest}
\pgfplotsset{width=7.5cm}
\pgfkeys{/pgf/number format/1000 sep={}}
%\patchcmd{\thebibliography}{\chapter*}{\section*}{}{} % Change thebibliography to section

\begin{document}

%----------------------------------------------------------------------------------------
%	PORTADA
%----------------------------------------------------------------------------------------

\title{Foto-mosaicos y optimización para el arte (Opt-Art)} % Con este nombre se guardará el proyecto en writeLaTex

\begin{titlepage}
\begin{center}

\textsc{\Large Instituto Tecnológico Autónomo de México}\\[2em]

%Figura
\begin{figure}[h]
\begin{center}
\includegraphics[scale=0.50]{itam_logo.png}
\end{center}
\end{figure}

% Pueden modificar el tamaño del logo cambiando la escala

\textbf{\LARGE Foto-mosaicos: optimización en el arte}\\[2em]

\textsc{\large Tesis}\\[1em]

\textsc{\large que para obtener el título de}\\[1em]

\textsc{\LARGE Licenciado en Matemáticas Aplicadas}\\[1em]

\textsc{\large Presenta}\\[1em]

\textsc{\LARGE Julio César Espinosa León}\\[1em]

\textsc{\large Asesor}\\[1em]

\textsc{\LARGE Dr. Edgar Possani Espinosa}\\[2em]

% Asegúrense de escribir el nombre completo de su asesor

\end{center}

\vspace*{\fill}
\textsc{Ciudad de México \hspace*{\fill} 2025}

\end{titlepage}

%----------------------------------------------------------------------------------------
%	DECLARACIÓN
%----------------------------------------------------------------------------------------

\thispagestyle{empty}

\vspace*{\fill}
\begingroup

\noindent
«Con fundamento en los artículos 21 y 27 de la Ley Federal del Derecho de Autor y como titular de los derechos moral y patrimonial de la obra titulada ``\textbf{Foto-mosaicos: optimización en el arte}'', otorgo de manera gratuita y permanente al Instituto Tecnológico Autónomo de México y a la Biblioteca Raúl Bailléres Jr., la autorización para que fijen la obra en cualquier medio, incluido el electrónico, y la divulguen entre sus usuarios, profesores, estudiantes o terceras personas, sin que pueda percibir por tal divulgación una contraprestación.»

% Asegúrense de cambiar el título de su tesis en el párrafo anterior

\centering 
\vspace{3em}
\textsc{\textbf{JULIO CÉSAR ESPINOSA LEÓN}}

\vspace{5em}
\rule[1em]{20em}{0.5pt} % Línea para la fecha

\textsc{Fecha}
 
\vspace{5em}
\rule[1em]{20em}{0.5pt} % Línea para la firma

\textsc{Firma}

\endgroup
\vspace*{\fill}

%----------------------------------------------------------------------------------------
%	DEDICATORIA
%----------------------------------------------------------------------------------------

\pagestyle{plain}
\frontmatter

\chapter*{}
\begin{flushright}
\textit{A mis padres, \\por su apoyo, dedicación, paciencia y amor.}
\end{flushright}

%----------------------------------------------------------------------------------------
%	AGRADECIMIENTOS
%----------------------------------------------------------------------------------------

\chapter*{Agradecimientos}

\noindent Quiero agradecer a todas las personas que me acompañaron durante este camino 

Al Dr. Edgar Possani, por sumarse al trabajo y apoyarme con tanta paciencia.

%----------------------------------------------------------------------------------------
%	TABLA DE CONTENIDOS
%---------------------------------------------------------------------------------------

\tableofcontents

%----------------------------------------------------------------------------------------
%	TESIS
%----------------------------------------------------------------------------------------

\mainmatter % Empieza la numeración de las páginas

\pagestyle{plain}

% Incluye los capítulos en el fólder de capítulos




\include{Chapters/1.Intro}

\include{Chapters/2.Caso}

\include{Chapters/3.Tecnicas}

\include{Chapters/4.Resultados}

\include{Chapters/5.Conclusion}

%----------------------------------------------------------------------------------------
%	BIBLIOGRAFÍA
%----------------------------------------------------------------------------------------


%\addcontentsline{toc}{chapter}{Introducción}
\chapter{Introducción}\label{chapter:intro}

Históricamente, la optimización matemática ha sido una disciplina altamente recurrida para la solución de problemas en varias áreas del conocimiento y la práctica (economía, informática, industria, logística, etc.). Sin embargo, fuera de la amplia esfera de problemas técnicos o puramente científicos abordables por la optimización hay una de serie de modelos que concilian la optimización, particularmente del tipo lineal, con problemas de carácter estético más vinculados con ramas como el arte o la composición fotográfica. La presente tesis abordará el problema de reproducir o replicar con buena similaridad una imagen mediante el empleo, ya sea de trazos continuos a lo largo de un cuadro, o mediante imágenes diversas que, posicionadas estratégicamente, lograrán construir un producto que, a ojo humano, tendrá una forma fácilmente asociable con la imagen objetivo. Se presentarán dos modelos de optimización lineal entera: el primero,  un problema lineal con variables de decisión en tres dimensiones (siendo éstas asociadas a renglón, columna y tipo de imagen); y el segundo, una aplicación clásica en la Investigación de Operaciones con larga historia en el campo; éste es el problema del agente viajero (TSP por sus siglas en inglés, \textit{Traveling Salesman Problem}) para esta tesis se traza un camino hamiltoniano similar a la imagen con una historia y varios estudios relacionados que datan desde el siglo XIX, en el que William Hamilton y Thomas Kirkman lo plantearon (González-Santander, 2020). 

Dicho esto, los capítulos del presente escrito se centran, primero, en el Capítulo \ref{chapter:photom}, en explicar el planteamiento de los fotomosaicos en escalas de grises como un problema de programación lineal y la posterior extensión del problema al color (para este efecto, se desarrolla un paréntesis para dilucidar el concepto del color promedio a través de una técnica estadística, el k-medias ); después, en el Capítulo \ref{chapter:tsp}, se explica el Problema del Agente Viajero (TSP), una formulación de programación lineal y las heurísticas que se han usado para obtener solución aproximada para este problema, después se muestran aplicaciones al conectar ciudades para replicar una imagen; posteriormente, el Capítulo \ref{chapter:implem} se enfoca en desarrollar los resultados y comentar los procedimientos que fueron seguidos en el cómputo de las soluciones de los problemas y las correspondientes imágenes desplegadas.  Finalmente, en la conclusión (Capítulo \ref{chapter:concl}) se dan algunas observaciones finales y probables alcances futuros.


%\addcontentsline{toc}{chapter}{La programación lineal}
\chapter{La programación lineal}\label{chapter:proglin}
%\section{Introducción}\label{section:intro}

\section{Definición general}

La programación lineal es un área de la optimización que busca minimizar o maximizar una función lineal sobre múltiples variables, de tal manera que dichas variables cumplan un conjunto de restricciones (ecuaciones o inecuaciones), también lineales. La expresión estándar de un problema lineal es la siguiente:


\begin{subequations}

\begin{equation}\label{uno0} 
 \underset{x_{i}  }{\text{min}}
 \sum_{i=1}^{ n } c_{i} x_{i} \\
\end{equation}  

\begin{equation}\label{dos0} 
 \text{s.a.}
 \ \sum_{i = 1}^{n} a_{i}x_{i} \leq b_{i}  \;\;\; \forall i \in \{ 1, \dots , m \} \\
\end{equation}

\begin{equation}\label{tres0} 
 \  x \geq 0  \\
\end{equation}


\end{subequations}

%\sum_{f \in F} x_{f i j}=1  \hspace{0.5cm}   \forall (i, j) \in \{ 1, \dots , m \}  \times  \{ 1, \dots , n  \}  \\

Las desigualdades en la expresión \ref{dos0}, especifican un espacio geométrico cerrado, más específicamente, un poliedro convexo al cual se le denomina región de factibilidad.

La disciplina y teoría de la programación lineal se manifiesta en problemas que que buscan maximizar un beneficio o minimizar un costo bajo circunstancias que restringen la usabilidad de recursos. Dicho beneficio o costo depende de las cantidades de los recursos; en estos casos recursos y costos se relacionan en un sistema de ecuaciones o inecuaciones lineales. Algunos de sus primeros usos se remontan a la Segunda Guerra Mundial en aplicaciones de planificación de gastos y recursos para reducir costos propios y aumentar las pérdidas del enemigo. Otros usos consisten en problemas de flujos de redes en informática y de mercancías en comercio; así como economía y gestiones de inventario, portafolios financieros y suministro de alimentos.


Los programas lineales fácilmente se pueden garantizar que son resolvibles en la medida de que la región factible sea no vacía y acotada en la dirección del gradiente de la función objetivo. El algoritmo Simplex fue el primero que se propuso para resolver estos problemas. Gráficamente la solución se puede representar como el contacto de un poliedro convexo con las curvas de nivel de una función objetivo cóncava (Fernandez, V, 2011). Sin embargo, al no haber convexidad estricta de la región factible ni concavidad estricta de la función, no se puede garantizar la unicidad de las soluciones; es más, para programas lineales no discretos puede haber hasta una infinidad de soluciones. Un caso que ejemplifica la infinidad de soluciones es cuando una de las restricciones en la dirección del gradiente de la función objetivo es paralela a las curvas de nivel. Lo que sí se puede asegurar es que cuando menos un vértice de la región factible es una solución óptima. La gráfica \ref{fig:simplxx} da un ejemplo de un programa lineal en el espacio $2$-dimensional donde las curvas de nivel van desplazándose en valores de la función objetivo en el vértice crecientes por cada iteración hasta dar con el vértice óptimo. Esta solución gráfica ejemplifica un concepto extiende su alcance y validez a más dimensiones y ante variedades de tamaño arbitrario de restricciones, $m$.




\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{direccion_reg_fac.png}
         \caption{Fotomosaico}
         \label{fig:simplxx}  
     \end{subfigure}
     \hfill
     \caption{Ejemplo bi-dimensional de la resolución gráfica un problema lineal.}
     \label{gfig:simplxx}     
\end{figure}
 

Las variaciones de esta clase de problemas extendidas a más dimensiones pueden resolverse mediante el método Simplex, que incorpora variables de holgura para convertir las desigualdades en igualdades y ejecuta operaciones lineales simples sobre la función objetivo y las restricciones para encontrar el óptimo del problema. Este método irá llevando a quien lo resuelve de vértice en vertice hacia mejores soluciones (mejores valores de la función objetivo) cada vez hasta dar con el(los) óptimo(s).

 \section{Programación entera}\label{sec:ram_ent}

 Cuando se añade la restricción de que sean enteros los valores de las coordenadas de una solución a un programa lineal, la busqueda de un óptimo puede complicarse. Puede pensarse, por ejemplo, en buscar la solución entera más cercana al problema sin restricciones de solución entera  en la región factible (a éste también se le llama \say{problema relajado}); sin embargo hay bastantes casos donde, al emplear este enfoque se puede alejar uno del óptimo entero. Ante estas dificultades, se vuelve necesario explorar distintas zonas de la región factible usando algoritmos, el más conocido de éstos siendo el de ramificación y acotamiento.


 En su capítulo para cursos de optimización, Goic (2009) define los elementos más básicos para la definición matemática de esta clase de problemas. En el mismo, establece la fundamental importancia de elegir de manera estratégica las coordenadas a explorar ya que, si bien esta elección es indistinta en función de encontrar el óptimo (la ramificación y acotamiento \textit{per se} encuentra el óptimo), el iterar sobre las coordenadas en un buen orden permite ahorrar, dependiendo del problema en cuestión, iteraciones del algoritmo que implicarían costos computacionales sustantivamente elevados. En la formulación de Goic, el planteamiento parte inicialmente de la resolución del problema lineal relajado y, dada esta primera aproximación, va incorporando dos restricciones sobre alguna variable no entera (no importa mucho cuál): una restricción con el valor de esta variable por encima del 'techo' del primer óptimo y otra por debajo del 'piso' del mismo, eligiéndose de ahí aquella restricción con la mejor solución. En caso de que esta última solución sea entera, se detiene la ejecución de los pasos dando con un óptimo; de otra forma, se procede a la elección de una nueva variable no entera a ramificar. Dada la solución más reciente, el algoritmo reproduce y evalúa las ramificaciones de distintas variables fraccionales hasta dar con una solución con todas sus variables enteras. En términos de formulación matemática, lo que se hace es transitar de un problema, $P$ (el problema original) a un problema $P_{0}$ (el problema relajado), el cual sería el primer nodo en el conjunto total de ramas a explorar, de tal manera que, como definición inicial, $L = \{ P_{0} \}$


\begin{subequations}

\begin{equation}\label{uno} 
 (P) \underset{x_{i}  }{\text{min}}
 \; z = \sum_{i=1}^{ n } c_{i} x_{i} \\
\end{equation}  

\begin{equation}\label{dos} 
 \text{s.a.}
 \ A x \leq b  \\
\end{equation}

\begin{equation}\label{tres} 
 \  x \geq 0, x \in  \mathbb{Z}  \\
\end{equation}

\end{subequations}
\begin{subequations}

\begin{equation}\label{uno} 
 (P_{o})  \; \underset{x_{i}  }{\text{min}}
 \; z = \sum_{i=1}^{ n } c_{i} x_{i} \\
\end{equation}  

\begin{equation}\label{dos} 
 \text{s.a.}
 \ A x \leq b  \\
\end{equation}

\begin{equation}\label{tres} 
 \  x \geq 0, x \in  \mathbb{R}  \\
\end{equation}

\end{subequations}


Luego, de $P_{0}$ se deriva un subproblema, $P_{k}$, el cual elige una coordenada fraccional de $x$, i.e., $x_{i}$ y optimiza los siguientes problemas subyacentes.

\begin{align}
   (P_k^{-})  \;\; min  \; z = \sum_{i=1}^{ n } c_{i} x_{i} & &  (P_k^{+}) \;\; 
 min  \; z = \sum_{i=1}^{ n } c_{i} x_{i} \\
  x \in  \mathbb{R} & & x \in  \mathbb{R} \\
  x \leq  \lfloor f \rfloor  & & x \geq  \lceil f  \rceil + 1
  \end{align}

De tal manera que, si existe factibilidad en ambos problemas, se incorporan como nodos $P_{k}^{+}$ y $P_{k}^{-}$ de la lista $L$. Iterativamente, y dependiendo de la integralidad de las coordenadas en la solución de la ejecución corriente, se irá corriendo esta misma lógica sobre las ramas del arbol de problemas descartando o  \say{podando / acotando} problemas  (lo cual se refleja en una reducción del conjunto $L$)  sin solución factible o de solución entera y actualizando las soluciones óptimas integrales que existan de manera temporal en los nodos hasta el momento explorados (este óptimo se define como $\hat{Z}$). El algoritmo deja de correr cuando que el conjunto de problemas, $L$, a ramificar sea vacío.

La complejidad computacional de un algoritmo se refiere al tiempo o espacio requerido para ejecutarse en función del tamaño de la entrada, $n$. Se le suele expresar por la notación \textit{Big O} que describe la relación tamaño - tiempo; algunos comunes casos de orden son $O(1)$ (no dependiente de $n$), $O(n^{a})$ (polinomial de orden $a$) o $O(2^{n})$ (exponencial). El hecho de que una solución hallada por método Simplex a un problema lineal sea de una complejidad determinada y que el algoritmo de ramificación y acotamiento resuelve sucesivamente varios algoritmos de este tipo, vuelve a la complejidad computacional del problema lineal entero naturalmente mayor al problema lineal relajado. Se trata de una complejidad que puede pasar de un orden polinomial específico a uno polinomial más grande o inclusive exponencial. Cuando se escala la proporción en la dimensión del vector de variables de decisión y dimensión de restricciones atender esta clase de problemas elevada se vuelve complejo, por lo cual se recurre a las heurísticas, que no son sino métodos aproximados para encontrar soluciones óptimas o cercanas a la óptima de manera eficiente, sin garantizar la optimalidad global en la solución. 


%\subsection{Nuevo rival - Cardoso, et. al.}

\chapter{Fotomosaicos}\label{chapter:photom}

\section{Fotomosaicos: concepto y contexto histórico}\label{sec:phm_grey}

Una imagen digitalmente desplegada parte comúnmente de la lectura / interpretación de un archivo JPEG o PNG. Ambas clases de archivos pueden traducirse como un arreglo numérico de pixeles, entendiendo al pixel (abreviación de \textit{picture element}) como la unidad mínima de información en la imagen. Esto se ve con mayor detalle más adelante en este capítulo. En la mercadotecnia han abundado técnicas de publicidad que consisten en reproducir con elevada similaridad una imagen de interés conformada por un conjunto de imágenes yuxtapuestos que, individualmente vistos, no presentan asociación con la imagen aproximada. Un fotomosaico ---o mosaico fotográfico--- es una imagen dividida en secciones rectangulares, las cuales pueden entenderse o interpetrarse como submatrices de la matriz: en el presente texto se habla indistintamente también de \say{rectángulos} o \say{subáreas}. En el fotomosaico cada sección se reemplaza por otra imagen que se le asocia por algún criterio de similaridad (o distancia), mediante este arreglo se logra hacer reconocible una imagen. Para construir un fotomosaico, se requieren tres insumos: una foto objetivo, un conjunto de mosaicos a usar para una dada subsección y un procedimiento o algoritmo que asigne a cada rectángulo, un mosaico. La idea del fotomosaico tiene una historia reciente en el ámbito de la computación, cuando en fechas similares dos personajes implementaron procedimientos con los cuales podía llevarse a cabo esta tarea. En 1993 Joseph Francis, diseñador, desarrolló un \textit{software} trabajando en el departamento de animación por computadora de la agencia de publicidad R/Greenberg. Por otra parte, en 1995, Robert Silvers, como estudiante de ingeniería en el MIT, desarrolló otro algoritmo que logró gran impacto y audiencia cuando construyó la imagen de la actriz Marilyn Monroe a partir de portadas de la revista LIFE como parte de una edición para el sexoagésimo aniversario de LIFE, haciendo extensivo su desarrollo a un \textit{software} cuya patente registró años más tarde (Fraga, 2024). 


\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{silvers ladydi.png}
         \caption{Fotomosaico}
         \label{sfig:mar_mon}
     \end{subfigure}
     \hfill
     \caption{Marilyn Monroe formulada como conjunto de revisas LIFE; portada de aniversario $60$. Por Robert Silvers, primera implementación relevante de algoritmo patentado.}
     \label{fig:mar_mon}     
\end{figure}
 

El programa desarrollado por Silvers se se vio reflejado en réditos económicos para él, principalmente en el campo de la mercadotecnia. Los algoritmos, planteamientos matemáticos / computacionales que planteó no se hicieron públicos con el objetivo de explotar la patente. Sin embargo en los años sucesivos se implementaron otros procedimientos que desarrollaban fotomosaicos. Algunos ejemplos son, en el campo informático del \textit{open source}, lenguajes como \textit{R} y Python han desarrollado módulos que permiten generar fotomosaicos con los tres tipos de insumos ya mencionados; y todo esto, como da a entender el nombre de \textit{open source}, por un costo cero para el usuario. La NASA, asimismo, en 2014 generó un fotomosaico de una vista del planeta tierra conformada por más de $36,000$ fotos de personas tomándose \textit{selfies} totalizadas en $3.2$ mil millones de pixeles (o giga-pixeles) como parte de un programa orientado a concientizar sobre el cambio climático (Cole, 2014).

\section{Fotomosaicos en escalas de grises}\label{sec:phm_grey}

En la introducción se hace referencia a dos maneras de replicar imágenes con optimización lineal que se desarrollarán en el presente estudio. El primer modelo es el de los fotomosaicos en blanco y negro. Parte del supuesto de que se cuenta con una imagen en blanco y negro con una gama de escalas de grises (o \textit{greyscales} en inglés ). Se asocia una menor escala de gris a una mayor luminosidad o blancura. Hay una serie de pasos estándar que deben de seguirse si se buscan generar las instancias de programación lineal para fotomosaicos (o para resolver con TSP como en el Capítulo \ref{chapter:tsp}). A continuación se enlistan:

\begin{itemize}
	\item Se particiona la imagen en grupos de pixeles. Cada grupo constará de rectángulos con $k$ pixeles a lo largo por $h$ pixeles a lo ancho. Dividimos a la imagen e $m$ niveles tipo renglón y $n$ niveles tipo columna de éstos, de tal manera que la imagen final resultante cuenta con dimensiones de pixeles $\mu' \times \nu'$, donde $\mu'= k\;m$ y $\nu'= h\;n$ y cada entrada puede especificarse como el par ordenado renglón - columna $(i,j) \in \{1,...,m\} \times \{1,...,n\}$; asímismo, obtenemos una escala de grises para cada pixel en el rango discreto de $0$ a $255$. Llámesele $\psi_{i'j'}$.
	\item Se obtiene la escala de grises promedio de cada rectángulo  en la entrada $(i,j)$, es decir $\psi_{i j} = \frac{1}{hk} \sum_{i'=1}^{k} \sum_{j'=1}^{h} \psi_{i' j'}$. Notar que aquí $(i,j)$ denota posición del rectángulo, y $(i',j')$ denota posición del pixel (unidad mínima de información en imagenes digitales) dentro de cada uno de tales rectángulos. Se divide promedio generado entre $255$,  para efectos de determinar un cómputo de distancias más sencillo (acotado entre niveles de $0$ a $1$), $\beta_{ij}=\psi_{ij}/255$. Esta será una escala de luminosidad del rectángulo.
    \item Supóngase que se cuenta con un conjunto $F=\{ 1, \dots  , cf\}$ de mosaicos (con cardinalidad $cf$), cada rectángulo representar un una fotografía (según la bibliografía, se les llama fichas, fotos, mosaicos / \textit{tiles} en el planteamiento original de Robert Bosch). Cada mosaico de tipo $f \in F$ cuenta con una intensidad lumínica con valor $b_{f}$. Supóngase que se cuenta con a lo menos un rectángulo con el mosaico de tipo $f$ impreso, pero no se puede usar más de $u_{f}$ veces. Bajo este planteamiento, se espera que el total sea de $\sum u_{f}=U \geq m \; n$ mosaicos disponibles.
    \item Se posicionan los mosaicos de acuerdo a la solución optimal del problema presentado a continuación, \ref{eq:photom}, y se despliega la imagen resultante de colocarlos, dicha imagen es el fotomosaico. 
\end{itemize}
 

En \ref{eq:photom} se muestra el planteamiento del vector de costos y el conjunto de restricciones introducido para el artículo realizado en la \textit{Orbelin College}, \say{Opt Art}  (Bosch, 2006).

\begin{subequations}\label{eq:photom}

\begin{equation}\label{unoM} 
\underset{x  }{\text{min}}
\; z = \sum_{f \in F} \sum_{i=1}^{m} \sum_{j=1}^{n} (b_{f}-\beta_{ij})^2 x_{f i j} \\
\end{equation}  

\begin{equation}\label{dosM} 
\text{s.a.}
\sum_{i=1}^{m} \sum_{j=1}^{n} x_{f i j} \leq u_{f} \hspace{0.5cm}   \forall f \in F \\
\end{equation}


\begin{equation}\label{tresM} 
\sum_{f \in F} x_{f i j}=1  \hspace{0.5cm}   \forall (i, j) \in \{ 1, \dots , m \}  \times  \{ 1, \dots , n  \}  \\
\end{equation}

\end{subequations}


Llámese $z^{*} = argmin z$ al valor de la función objetivo en el óptimo del problema \ref{eq:photom}. La expresión \eqref{unoM}  minimiza la suma de diferencias cuadráticas—o bien, de los cuadrados de las distancias euclideanas en $\mathbb{R}^{1}$ — entre las luminosidades del mosaico y el rectángulo en el área subyacente sobre la cual se coloca el mosaico $f$ en la posición $(i, j)$ (Possani, 2012). La función de costos será de tipo tridimensional: $c_{fij}=(b_{f}-\beta_{ij})^2$. La condición en \eqref{dosM} garantiza que se no se excedan las dotaciones disponibles de cada figura. La restricción \eqref{tresM} asegura que haya exactamente una foto en la posición $(i, j)$. Cabe destacar que, si bien este problema es de programción lineal entera (los valores admitidos por el modelo son dicotómicos: $0$ o $1$), el mismo se puede plantear como un problema con variables de decisión continuas y aún así se deriva de éste un resultado óptimo entero. Bosch, en su artículo \textit{Opt Art} asegura esta integralidad, la razón de la misma es que el problema en cuestión es una instancia específica de una categoría de planteamientos de optimización combinatoria catalogados como \say{El Problema de Asignación} que busca asignar un número de objetos (tareas, recursos) a un número igual de destinatarios (personas, máquinas o, en este caso, rectángulos ordenados), de tal manera que se minimice el costo total de la asignación. La matriz de restricciones de \say{El Problema de Asignación} es unimodular, lo cual quiere decir que es cuadrada, invertible y su inversa tiene entradas enteras (o equivalentemente, su determinante es ±$1$). En programación lineal, si la matriz de restricciones es unimodular, las soluciones básicas son enteras, asegurando integralidad sin técnicas adicionales. Esto es una noticia buena, ya que añadir la propiedad de \say{entero} o \say{integralidad} implica en la solución complejidades sustanciales que dificultan mucho la tarea de optimización; el algoritmo de ramificación y acotamiento para problemas enteros expresado en el Capítulo \ref{chapter:proglin} ilustra esta aseveración, pues la ramificación podría iterarse hasta $m n$ veces.

El planteamiento referido cuenta con tres dimensiones en su vector de costos, $c_{fij}$: la primera corresponde al mosaico de tipo $f$ (que va a contrastarse en escala de grises con el rectángulo en cuestión) y la segunda y tercera a la coordenada del rectángulo (horizontal y vertical, respectivamente). Una variación a este problema consistiría en fichas de dominó con un par de valores ordenados $(w, z) \in{ \{0,..., 9\} \times  \{0,..., 9\}     }$ que sustituyen a la dimensión de fichas $f$, donde $w<z$  y cada ficha puede cubrir dos rectángulos yuxtapuestos vertical u horizontalmente. La sustitución de $f$ por el par ordenado de valores de las fichas implica pasar de tres a cuatro dimensiones en el vector de costos. Ahora bien, la orientación de la ficha de dominó implica una nueva dimensión, la quinta: $o$ que serían las cuatro posibles orientaciones de la ficha de dominó. De tal forma que el vector de costos resultantes sería de tipo $c_{wzijo}$.  Adicional se tiene una restricción de tipo \ref{tresM} pero que considera que los $m n$ espacios deben llenarse una única vez. Este planteamiento fue introducido por Bosch en su artículo \say{Constructing Domino Portraits} de 2004. Naturalmente el problema planteado para mosaicos con fichas de dominó tiene más complejidad combinatoria que el planteamiento de esta sección (\ref{eq:photom}), ya que se tienen dos dimensiones más en los costos, así como más restricciones. Si bien el desarrollo matemárico de este problema no es objetivo de este escrito, sí ayuda a comprender el tipo de variaciones que puede uno creativamente ingeniarse sobre el modelo de fotomosaicos al transformar el vector de costos y las especificaciones de las restricciones.


\section{Fotomosaicos en la triada RGB, o espacios de color}\label{sec:phm_col}

\subsection{Programa lineal}\label{subsec:phm_col_mat}


Una pregunta interesante es ¿cómo se construiría un fotomosaico usando el principio de optimización lineal planteado al inicio del capítulo, pero ahora en lugar de optimizar la asignación de escalas de grises, hacerlo en un contexto de color? Para ello, vale la pena cuestionarse cómo se representa una imagen a color. En los niveles primarios de educación es común mostrar empíricamente (con acuarelas, digamos) cómo los colores se producen mezclando rojo, amarillo y azul, a esto se le llama en el modelo RYB, identificado como un modelo de tipo sustractivo (de hecho es el más común dentro de esta clase). Un modelo sustractivo parte del principio de que \say{el color de un objeto depende de las partes del espectro electromagnético que son reflejadas por él, o dicho de otro modo, de las partes del espectro que no absorbe} de tal manera que a más colores se superponen, más oscuro es el resultado, esto implica que se resta luminosidad, de esto se deriva el nombre de \say{sustractivo} (Castañeda, 2005). La manera en que el ojo humano intepreta un objeto específico depende no necesariamente de la luz que el objeto en sí emane, sino de las longitudes de onda que deja de absorber. Por el contrario, en la representación de un objeto por una pantalla se depende de la emisión de la luz realizada por el dispositivo, de ahí que se ha de emplear un modelo opuesto, i.e., el de la síntesis aditiva del color. Una ventaja que tiene la misma es que el color digital de un pixel procesado por un dispositivo puede ser representado como una incorporación de valores numéricos de cada pixel que, en su conjunto, forman un espacio $3$-dimensional. El modelo aditivo mas común en la informática y la fotografía parte de los colores primarios rojo, verde y azul (RGB, por sus siglas en inglés). A este espacio de color $3$-dimensional también se le llamará triada RGB. Cabe mencionar que, así como en las escalas de grises, en las imágenes a color cada componente puede representarse convencionalmente en escalas continuas entre $0$ y $1$ o discretas de $256$ valores  (estos son dos ejemplos: el modelo se elige dependiendo de los requerimientos del problema en curso). Una extensión del principio de la solución de fotomosaicos sería minimizar la suma de los cuadrados de las distancias euclideanas, pero esta vez ya no en en $\mathbb{R}^{1}$, sino en $\mathbb{R}^{3}$. Para ello, la fórmula enunciada en  \eqref{unoM} puede modificarse incorporando tres componentes: la primera dimensión, $r$ (que antes existía, sin embargo se omitía / obviaba al tratarse de  una única dimensión), la segunda, $g$ y, finalmente, $b$.


Dicho esto, podemos ocupar los conceptos definidos inicialmente en este capítulo, pasando así de $\beta_{ij}$ y $b_{f}$ a $\beta_{ij}^{A}$ y $b_{f}^{A}$ donde el superíndice $A$ refiere a \say{aditivo}; para este caso, $\beta_{ij}^{A}= (\beta_{ijr}, \beta_{ijr}, \beta_{ijg})$ es el color del pixel \say{promedio} (concediendo que pudiera llamársele así y, en efecto, se puede comprobar que semejante pixel existe)  y $b_{f}^{A}= (b_{fr}, b_{fr}, b_{fg})$ es el color del mosaico $f$. Habiendo definido esto, generamos el problema lineal siguiente:


\begin{subequations}

\begin{equation}\label{unocM} 
\underset{x  }{\text{min}}
\; z = \sum_{f \in F} \sum_{i=1}^{n} \sum_{j=1}^{m} [ (b_{fr}-\beta_{ijr})^2 +(b_{fg}-\beta_{ijg})^2 + (b_{fb}-\beta_{ijb})^2 ]  x_{f i j} \\
\end{equation}  

\begin{equation}\label{doscM} 
\text{s.a.}
\sum_{i=1}^{n} \sum_{j=1}^{n} x_{f i j} \leq u_{f} \hspace{0.5cm}   \forall f \in F \\
\end{equation}


\begin{equation}\label{trescM} 
\sum_{f \in F} x_{f i j}=1  \hspace{0.5cm}   \forall (i, j) \in \{ 1, \dots , m \}  \times  \{ 1, \dots , n  \}  \\
\end{equation}

\end{subequations}

Podemos simplificar la expresión del vector de costo unitario $(b_{fr}-\beta_{ijr})^2 +(b_{fg}-\beta_{ijg})^2 + (b_{fb}-\beta_{ijb})^2$ como $d^{2}( b_{f}^{A},\beta_{ij}^{A})$ con $d$ la norma euclideana en $\mathbb{R}^{3}$. Este costo, que antes se encontraba en el intervalo de valores $[0,1]$ ahora los toma en $[0,3]$. Vale la pena observar que, si bien la expresión parece más complicada debido a cómo se expresa el coeficiente de costos, en realidad el problema matemáticamente visto es en esencia idéntico con dos salvedades: primera, que el cálculo de los costos es más largo; segunda, que encontrar mosaicos que cubran de manera razonablemente similar el total del espectro de colores que hay en la imagen grande a representar ya no es tan sencillo, debido a que se cuenta con tres dimensiones. Así —adelantándonos a la implementación y la elección de mosaicos— si en el planteameniento en escalas de grises se deseaba tener $10$ imágenes con escalas de grises promedio homogéneamente distribuídas sobre el rango $[0,1]$ (separadas por un \textit{grid} de $0.1$) ahora se necesitarían $10^{3} = 1000$ imágenes con escalas promedio distintas para cumplir la tarea análoga; por lo tanto la cardinalidad del conjunto mosaicos $F$, debe de aumentar considerablemente si se desea generar una representación legible de una imagen con matices variados, afectando por consiguiente la complejidad computacional de la solución del problema. Como conclusión la base detrás del planteamiento es idéntico, pero incrementar la cardinalidad del conjunto de mosaicos a colocar implica incrementar los requerimientos computacionales de la resolución. 

\subsection{Idea del color promedio }\label{subsec:phm_col_mat}

En el subcapítulo anterior anticipaba que sí existe el concepto de un color dominante o promedio en una imagen. En efecto, desde la década de 1970 existe una teoría en torno a la cuantificación del color que busca comprimir una variedad de tonos de color a un valor y que dió luz a nociones que hoy se manejan recurrentemente, relacionados, por ejemplo, con la popular extensión de archivo digital JPEG. Hay dos conceptos centrales en torno a la cuantificación del color. El primero es que éste se usa para reducir costos computacionales, en especial en lo referente a dispositivos con una capacidad limitada, al reducir optimalmente la información desplegada por un archivo de imagen (tal es el caso del JPEG). El segundo, es que da al analista los elementos para entender las variedades de color, ayudando a categorizar el color de una cosa o producto, o bien a derivar una paleta optimizada de una imagen. 

Para la segunda cuestión, destaca el algoritmo de k-medias (universalmente conocido como \textit{k-means} por su denominación en inglés) que permite usar exactamente la misma dimensión (renglon por columna, $\mu' \times \nu'$ en términos del planteamiento explicado) de pixeles pero donde la totalidad de valores de los mismos en el hiperplano $RGB$ sea limitada y asignada manualmente por el usuario, como un hiperparámetro. Antes de ahondar en este enfoque, conviene hacer una breve recapitulación de dicho algoritmo, elemental en el estudio del aprendizaje supervisado, cuyo objetivo es segmentar el universo en un agrupamiento que opera en función de la proximidad vista como distancia euclideana (Chong, 2021). En síntesis, para un conjunto de observaciones, $x$, en un espacio euclideano (indistintamente de su dimensión, para el análisis del espacio de color RGB la dimensión es $3$), el objetivo del algoritmo es seleccionar, primeramente, el hiperparámetro $k$ o número total de \textit{clusters} / segmentos a generar; posteriormente se enfoca en seleccionar los mejores centroides, asignar cada punto a su centroide más cercano (lo cual implica una asignación de cluster). De tal manera que el promedio de la suma cuadrática de la distancia de cada punto a su correspondiente centroide se vea minimizado. El algoritmo se ejecuta en bucle; sin embargo, en el resultado final computado, el centroide debe de ser igual al promedio, $\mu_{i}$ del i-ésimo cluster generado. Visto matemáticamente, se optimiza la expresión \ref{k_m}, la cual se encuentra en el artículo \say{\textit{K-means clustering algorithm: a brief review}} de Chong (2021).

\begin{equation}\label{k_m} 
z^{*} \; =  \; 
\underset{S  }{\text{argmin}}
\; \sum_{i =1}^{k} \sum_{x \in S } \| x-\mu_{i} \| ^{2} \\
\end{equation}  

Supóngase el caso con un \textit{cluster}, i.e. $k = 1$. En esta casuística hay único centroide $\mu_{1}$, y puede considerarse un ejercicio trivial donde el color \say{promedio} es el promedio aritmético en cada una de las tres dimensiones de los $renglon \times columna$ pixeles. Ejercicios empíricos pueden conducir a la conclusión de que este no es un muy buen valor para instanciar $k$, ya que en una imagen con cierta variedad en su gama de colores, este promedio aritmético estaría capturando cierto ruido de aquellos segmentos de la imagen que, si bien no son muy grandes, generan constraste, haciendo que el promedio computado se desvíe del color que tiene el objeto central de la imagen. Regresando al problema de la imagen, si se asigna $k=2$ se tiene un tipo de imagen; un refinamiento ocurriría si se usa $k=3$; y mucho mayor sería éste si se pasa a $k=10$. Dada la $k$, el algoritmo va a definir esta cantidad de centroides para agrupar la totalidad de valores de pixeles. Se desplegará cada centroide reemplazando al pixel original dando lugar a una imagen con la misma dimensión (renglón por columna) pero menor variedad en sus colores (Aqil Burney, 2014). El caso trivial es cuando $k$ equivale al total de distintos valores de pixeles que hay en el espacio RGB, pues entonces el resultado es la misma imagen original. En la figura \ref{fig:cuatro figuras fl_bl} se desarrolla la simplificación con k-medias, en un ejemplo con tres despliegues, cada uno con una $k$ distinta.

\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_bl_tot.png}
         \caption{ Imagen original}
         \label{fig:fig_bltot}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_bl_2.png}
         \caption{$2$ tipos de pixeles }
         \label{fig:fig_bl2}
     \end{subfigure}
     \hfill 
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_bl_3.png}
         \caption{$3$ tipos de pixeles}
         \label{fig:fig_bl3}
      \end{subfigure}
       \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_bl_10.png}
         \caption{$10$ tipos de pixeles}
         \label{fig:fig50}
     \end{subfigure}
     \caption{Simplificación de imágenes basado en selección de pixeles-centroides del modelo k-medias (cuatro configuraciones para $k$)}
     \label{fig:cuatro figuras fl_bl}     
\end{figure}
 
 
El primer caso a desarrollar es de unas flores blancas: el objetivo es encontrar cuál es el tono de blanco que domina. El archivo original cuenta con un despliegue de $517 \times 517$ pixeles. Esto da un total de  $517^{2} = 267,289$ unidades de información. Sin embargo, solo existen $58,168$ distintos valores de pixeles, lo cual implica que uno o más de éstos se repiten. De estos valores, solo $22$ tienen más de $500$ pixeles cada uno; es decir, tienen más del $0.2\%$ del total de la información. El hallazgo interesante es que, de estos $22$ valores, todos tienen valores de $r$, $g$ y $b$ superiores a $0.90$. Lo cual quiere decir que son diferentes escalas del blanco ¿por qué entonces no agruparlos en un mismo cluster, junto con otros valores en una vecindad cercana en la triada RGB? En esta misma dirección, pero con una idea geométrica más formal, los ejercicios en \ref{fig:cuatro figuras fl_bl} experimentan el algoritmo de segmentación elegido para reducir esta diversidad de pixeles a distintas k's: $2$, $3$ o $10$. 

Ahora, la asignación de la $k$ depende de la clase de problema a abordar. En general para k-medias (en aplicaciones más allá de la cuantificación del color) existen varios criterios que permiten determinar una $k$ que satisfaga alguna condición \say{óptima}; dos métodos comunes son el método del codo y el análisis de la silueta. Como la participación del algoritmo k-medias en este escrito es meramente auxiliar y complementario para ilustrar el problema de optimización lineal en la asignación de mosaicos de color, se desea minimizar la discusión de pormenores del algoritmo. Para el caso específico de interés, a más homogénea es una imagen, más sencillo se espera que una $k$ \say{puequeña} será suficiente para desplegar la imagen con aceptable precisión. El lector puede imaginarse una imagen con fondo verde (un jardín) o blanco (retratos para identificación), como es común en la fotografía. La presencia del fondo y su contraste con el objeto central en imágenes complejas (considéresele \say{ruido}) dará lugar a una pérdida de información si asignamos un $k$ muy pequeña. Por lo tanto, para efectos de simplicidad, en el capítulo de implementación será importante que cada mosaico a asignar del conjunto $F$ sea una imagen con colores homogéneos, para así elegir el valor del centroide con más población de pixeles asociada, llamarle el \say{pixel promedio} del mosaico y asegurar que una $k$ pequeña (a saber, $k=2$) sea suficiente para determinar rapida y eficientemente un color promedio. Tantas imágenes con atributos similares al de la flor blanca mostrada  se pueden imaginar como colores de flores existan. Esto es, imágenes simples, uni-color, con un fondo nulo o chico para minimizar el ruido. En el capítulo de la implementación esta inventiva se llevará a cabo análogamente, precisamente con flores. Similarmente, bajo esta idea de color promedio determinado con k-medias existirá un \say{pixel promedio} en cada uno de los $mn$ rectángulos, que posicionados contiguamente, conforman la imagen objetivo.

En relación a la imagen de la flor blanca, la presentación de la figura \ref{fig:colprom bl} muestra el color dominante derivado de $k=2$, este color ya se conoció anteriormente en la figura \ref{fig:fig_bl2}, pues es aquél visualmente más abundante de ésta, o expresado con formalidad, el centroide determinado por el algoritmo con más pixeles asociados. 



\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_1px.png}
         \caption{Blanco-gris dominante}
         \label{fig:colprom bl}
     \end{subfigure}
     \hfill
     \caption{Color promedio de flores blancas derivadas de $k=2$.}
     \label{gfig:colprom bl}  
\end{figure}
 


\chapter{TSP: Agente viajero}\label{chapter:tsp}
%\section{Introducción}\label{section:intro}


%\subsection{Nuevo rival - Cardoso, et. al.}

\section{Problema de Agente viajero, descripción general}\label{sec:tspGral}


%Possanif
La teoría de grafos estudia las propiedades y relaciones de un grafo que es un par $(V,E)$ con $V$ un conjunto de vértices y $E$ conjunto de aristas que los une. Siendo la arista modelada, ya sea como un par dirigido, donde el orden de los vértices importa (digrafo o arco, representado por una flecha), o bien, no dirigido (representado por una simple arista o recta). Existen problemas de optimización planteados sobre grafos que pueden ser resueltos con programación lineal, siendo el problema del agente viajero (\textit{Traveling Salesman Problem}, TSP) uno de los más interesantes y populares (Desrochers, 1991). Este programa de define dentro del marco de los caminos hamiltonianos: dicho tipo de ruta se enfoca en visitar cada vértice de un grafo exactamente una vez. El TSP plantea que un individuo (el agente viajero) debe visitar una cantidad $n'$ de ciudades partiendo de una ciudad origen y finalizando el recorrido en dicha ciudad. El objetivo es minimizar la distancia total recorrida. Existe un conjunto de parámetros necesario para definir el problema: la distancia que hay entre cada par de ciudades existente; para ello defínase $c_{i, j}$ como el valor de la distancia que hay entre las ciudades (o vértices) $(i, j)$ para cada par $(i, j) \in \{1,\dots ,n'\}^2$.  Explicado este problema, se puede desarrollar intuitivamente una formulación matemática mediante la programación lineal entera en \ref{tsp_gen}.


\begin{subequations}\label{tsp_gen}

\begin{equation}\label{uno} 
 \underset{x_{i, j}  }{\text{min}}
 \sum_{i=1}^{n'} \sum_{j=1}^{n'} c_{i, j}x_{i, j} \\
\end{equation}  

\begin{equation}\label{dos} 
 \text{s.a.}
 \sum_{i=1}^{n'} x_{i, j}=1 \hspace{0.5cm}   \forall j \in \{ 1, \dots , na \} \\
\end{equation}

\begin{equation}\label{tres} 
\;\;\;\;\; \sum_{j=1}^{n'} x_{i, j}=1  \hspace{0.5cm}   \forall i \in \{ 1, \dots , n_{*} \} \\
\end{equation}

\begin{equation}\label{cuatro} 
\;\;\;\;\; \sum_{i \in S}\sum_{j \in S}  x_{i, j} \leq |S|-1 \hspace{0.5cm}   \forall S \subset \{ 1, \dots ,  n' \}
\end{equation}

\end{subequations}



Donde $S$ es el conjunto potencia generado con $\{ 1, \dots , n' \}$. El problema lineal esbozado en \ref{tsp_gen} se define en tres tipos de restricciones. Para entenderlo, defínase antes el conjunto de variables de decisión como $\{ x_{i,j} | (i, j) \in \{1, \dots , n' \}^{2} \}$ con dos asignaciones de valor posibles: $0$ y $1$. $1$ describe que el agente realizó un recorrido directo partiendo de la ciudad $i$ hacia la ciudad $j$ con una distancia correspondiente de $c_{i, j}$; $0$, por el contrario, indica el caso opuesto: no se viaja de $i$ a $j$. En términos técnicos, el agente viajero habría ocupado (o no) el arco dirigido $(i, j)$.
 

 Así, la primera expresión  \eqref{uno} es la función objetivo: el recorrido total para arribar a las $n'$ ciudades. \eqref{dos} exige que de cada ciudad se parta hacia una única ciudad; por su parte la condición \eqref{tres}, análogo a \eqref{dos}, requiere que a cada ciudad se arribe desde un único punto de partida. La factibilidad del \textit{tour} generado por el agente se termina de construir en el conjunto de ecuaciones \eqref{cuatro}, ya que sin éste podrían haber \textit{tours} donde a cada ciudad se llega una única vez y cada ciudad parte hacia un único destino, pero dos o más subconjuntos resultado de la partición de $ \{ 1, \dots , n' \}$ generan cada uno un recorrido o \textit{tour} cerrado. Supongamos que se generara una solución optimal con las restricciones \eqref{dos} y \eqref{tres} cumplidas, pero que constara de tres \textit{subtours}: $T_{1}, T_{2}, T_{3}$ con $T_{1} \cup T_{2}  \cup T_{3} = \{ 1, \dots , n' \}$. Poniéndonos imaginativos, esto querría decir que el agente terminó de recorrer $T_{1}$, sugiriendo que el agente pasó de $T_{1}$ a $T_{2}$ sin un arco de conexión, algo inviable en un tour continuo, luego hizo lo propio de $T_{2}$ a $T_{3}$. En este escenario se viola el supuesto de que el agente parte de un punto y termina en el mismo tras recorrer todas las ciudades. Resumidamente, la restricción \eqref{cuatro} elimina la posibilidad de lo que llamaremos \textit{subtours}. Sin embargo, al tratarse de una restricción que explora cada uno de los $2^{n' }$ posibles subconjuntos generables con  $\{ 1, \dots , n' \}$ (también caracterizado como \say{conjunto potencia}), es una restricción con una elevada complejidad computacional asociada que debe simplificarse con adecuadas alternativas, como se hace en las restricciones de Miller, Tucker  \& Zemlin introducidas en 1960 en el artículo \say{\textit{Integer programming formulations and traveling salesman problems}}. Sumado al planteamiento descrito, el TSP tiene como conjunto factible los $n'!$ posibles ordenamientos de $\{ 1, ..., n' \}$, de manera que los programas que lo estudian operan sobre el campo de \say{algoritmos de optimización combinatoria}. 

Ha continuación se retoma y explica el enfoque propuesto por Miller, Tucker  \& Zemlin (indistintamente también referido MTZ). Introdúzcanse $n'-1$ variables enteras, $u_{i}, i \in \{ 2, ..., n' \}$ que representan la posición / orden en que se visita la ciudad $j$, de tal manera que el mapeo de $i \neq 1$ a $u$ es inyectivo. Se formulan las $(n'-1)^{2}-n'$ restricciones \ref{mtz}, de subtour y las $n'-1$ restricciones \ref{ord_mtz}, especificadas para variables de orden. Las cuales sustituyen eficientemente a la expresión \label{cuatro} que explora el conjunto potencia de ciudades pasando a explorar el producto cartesiano cuadrado de las mismas (el cual es significativamente más pequeño). Complementariamente, este enfoque permite relajar las restricciones de integralidad: 

\begin{subequations}

\begin{equation}\label{mtz} 
u_{i}- u_{j} + (n'-1)x_{ij} \leq n'-2, i \neq j \\
\end{equation}  


\begin{equation}\label{ord_mtz} 
1 \leq u_{i} \leq n'-1 \\
\end{equation}  

\end{subequations}

 La idea detrás de estas restricciones es que, si el agente viaja de la ciudad $i$ a la ciudad $j$ entonces el orden en que se visita la ciudad $j$ 
 debe ser mayor al orden en que se visita la ciudad $i$. En caso contrario, se tendría $x_{ij} = 0$, por lo cual es trivial deducir que se cumple $u_{i}- u_{j} \leq n'-1 $ , pues $u_{i}, u_{j} \in \{2, ...,  n' \}$. Por lo cual la restricción garantiza que exista una solución factible con un único ciclo hamiltoneano (no hay multiplicidad de{\textit{subtours}); no obstante, las restricciones no garantizan el óptimo global, de donde se derivan alternativas de mejora para fortalecer las restricciones, alcanzando con las mismas un mejor óptimo. El grado de complejidad computacional del planteamiento tradicional al de TMZ pasa de $O(2^{n'})$ a $O(n'^{2})$, lo cual representa un ahorro computacional sustantivo. Este reforzamiento de la restricción puede extenderse a problemas de ciclos hamiltonianos más generales (enfoque más allá del TSP), tal como desarrolla Desrochers (1991) en su artículo que estudia problemas de rutas vehiculares (VRP's por sus siglas en inglés) \say{\textit{Improvements and extensions to the Miller-Tucker-Zemlin subtour elimination constraints}}. 


Aún con esta reducción con las restricciones de Miller, Tucker  \& Zemlin, el ritmo en que escala el tiempo de procesamiento computacional el programa lineal (i.e., la complejidad) vuelve necesario el ocupar heurísticas para hacer el cálculo con esfuerzos relativamente moderados. Esto ha sido comprobado tanto desde el enfoque empírico como desde la ciencia de la computación, demostrándose que no existe algoritmo alguno que resuelva el problema en tiempo polinomial; o, dicho en otros términos, se trata de un problema NP-Duro. En el artículo de Nilsson (2003) se explica un enfoque en la construcción de algoritmos para la resolución del TSP. Parte de los principios de \textit{i)} construcción de tours, \textit{ii)} mejora de tours, \textit{iii)} tiempo de cómputo (asociado a la complejidad) y \textit{iv)} la lejanía de la solución respecto a la cota inferior de \textit{Held-Karp} (asociado a la optimalidad del algoritmo). La \textit{Held-Karp} es el valor óptimo del problema TSP sin ocuparse las restricciones de integralidad en la solución, haciéndolo resolvible vía Simplex, o bien, aproximable con algoritmos. De tal manera, Nilsson discute los algoritmos con los cuales se construye una solución o tour factible, abordando su complejidad y distancias promedio resultantes respecto a la cota \textit{Held-Karp}. Esta distancia varía desde el $25\%$ en el algoritmo de vecino más cercano hasta el $10\%$ en el algoritmo de Christofides. 

Como segundo paso, se procede a mejorar el tour elegido en la anterior iteración, existiendo algoritmos  de \textit{2-opt}, \textit{3-opt}, \textit{k-opt} y sus correspondientes derivaciones. Para el \textit{2-opt} se seleccionan dos ciudades del tour y se reconectan siempre y cuando el tour resultante tenga una mejor solución. Este movimiento puede ser también interpretado como un reverso a un segmento del tour inicial. La selección de dos ciudades para este reverso tiene la ventaja de solo contar con una posible combinación en la reconexión de nodos, tal como lo muestra el gráfico \ref{fig:two_opt}. Nilsson estima una desviación respecto a la cota de  \textit{Held-Karp} de $5\%$ para el  \textit{2-opt}; para el \textit{3-opt}  (el cual sigue una lógica similar pero con dos alternativas para la reconexión de nodos) se reduce a $3\%$. Si bien los grados de mejora a un tour realizados desde este enfoque son relevantes, el cómputo sigue siendo complejo pues cada iteración implica una evaluación de cada pareja posible asociable a cada ciudad. Una manera efectiva de reducir esta complejidad es cotejar a cada ciudad versus sus $m$ vecinos más cercanos, con $m'$ el hiperparámetro a elegir. Esta variación o acelaración del algoritmo \textit{2-opt} requiere cierto nivel de sensibilidad del problema para elegir adecuadamente la $m$ y simplifica la optimización permitiendo reducir la complejidad del algoritmo por un grado polinomial (2 a 1), o de $O(n'^{2})$ a $O(m' n')$ (Nilsson, 2003). 


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{two_opt move.JPG}
  \caption{ Única representación del movimiento \textit{2-opt} }
  \label{fig:two_opt}
\end{figure}


Finalmente, el principio de mejora por \textit{k-opt} es extendible a una completa gama de variaciones que se le derivan, tales como el algoritmo de Lin-Kernighan, que elige la $k$ óptima para cada iteración, o al algoritmo de búsqueda tabú, el cual asigna costos a optar por determinados movimientos en la elección de ciudades catalogados como \say{movimientos tabú}. Asimismo, hay enfoques de probabilidad en los plantemientos heurísticos que implican simulaciones aleatorias y replican comportamientos biológicos; algunos ejemplos son los Algoritmos Genéticos y la Optimización de Colonia Hormiguera. 


%\subchapter{Arte con el agente viajero, o arte con línea continua}%\label{ssec:tspDescrip}
\section{Arte con el agente viajero, o arte con línea continua}\label{sec:tspDescrip}

La segunda implementación con una imagen a emular es vía el TSP: parte del supuesto de que se cuenta con una imagen en blanco y negro, desplegado y expresado como escala de grises. Procedemos de la siguiente manera, basado en los pasos indicados por Bosch (2003) en su artículo \say{\textit{Continuous line drawings via the traveling salesman problem}}

\begin{itemize}
	\item Particionamos la imagen en rectángulos conformados por pixeles. Cada rectángulo será de $k$ pixeles a lo largo por $h$ pixeles a lo ancho. Los rectángulos se identificarán en función de sus coordenadas o posición: horizontal —o columnas— siendo $n$ el total de éstos y vertical —o renglón— totalizando $m$. De tal manera que la matriz grande cuenta con dimensiones $\mu' \times \nu'$ con $\mu'= k\;m$ y $\nu'= h\;n$; asímismo, obtenemos una escala de grises para cada pixel en el rango discreto de $0$ a $255$ (empleando la conocida convención de $256$ escalas mencionada en \ref{subsec:phm_col_mat}). 
	\item Obtenemos la escala de gris promedio de cada rectángulo y fijamos un parámetro que ponderará el nivel de saturación máxima de ciudades viable para cada rectángulo: $\gamma \in [4, 9] \cap \mathbb{N}$ \footnote{Este rango de $[4,9]$ no tiene otra justificación más allá de la visual, i.e. se define a la luz de ejecuciones empíricas del planteamiento y las determinó Bosch en el artículo. Cabe destacar que valores superiores a $9$ podrían generar imágenes sobre-saturadas de puntos}. De tal manera, para el rectángulo $(i, j) \in \{1, \dots , m \} \times \{1, \dots , n  \}$ la escala de gris del pixel promedio será de $\psi_{ij}$, con valores entre $0$ y $255$. Entonces constrúyase
	
	\begin{equation}\label{oscG} 
	\begin{aligned}
	g_{ij} =  \floor{ \gamma -  \gamma \psi_{ij}/255} 
	\end{aligned}
	\end{equation}
	
	Ésta será una escala de oscuridad del rectángulo y el parámetro $\gamma$ introducido por Bosch implica variaciones en el grado de detalle de la imagen a desarrollar o saturación de ciudades. 
    \item Dividimos la imagen en $m \times n$ rectángulos; en cada uno situamos uniformemente $g_{ij}$ ciudades. El conjunto total de ciudades construidas será de cardinalidad $\tau$, definida como
    
    \begin{equation}\label{totalCiudades} 
	\begin{aligned}
	\tau=\sum_{i=1}^{m } \sum_{j=1}^{n} g_{ij}
	\end{aligned}
	\end{equation}
	
    \item Computamos las distancias (o \say{costos}) entre las $\tau$ distintas coordenadas en una matriz $C=[c]_{ij} \in \mathbb{R}^{\tau \times \tau}$. Resolvemos el TSP sobre estas distancias (se recomienda usar alguna heurística para hacer el problema escalable). Se conectan las ciudades por aristas dando lugar a una representación de aristas en el plano cartesiano; este es el resultado final.
    
\end{itemize}


Siendo que ahora el planteamiento se esboza sobre $\tau$ ciudades podemos entender que ahora la $n_{*}$ introducida en la sección anterior tiene un determinado valor en el problema del arte con línea continua $n'=\tau$.


\begin{figure}
  \centering
   \includegraphics[width=0.7\linewidth]{monalisa robert bosch.png}
  \caption{ Rostro de la Monalisa reproducido por Robert Bosch usando el problema del agente viajero }
  \label{fig:monalisa}
\end{figure}





%\section{Implementación}\label{subsection:partic}
\chapter{Implementación}\label{chapter:implem}


\section{Partición de la matriz en submatrices - rectángulo}\label{sec:partic}


Una imagen en escala de grises se entiende como un despliegue visual en el que cada unidad básica mostrada en la pantalla —mejor conocida como pixel— se ve representada por una cifra que cuantifica la cantidad de luz (o información de intensidad lumínica) presente. Representando la mínima unidad al negro y, la máxima, al blanco. La escala tiende a volverse discreta, ya que contar con un continuo estándar de $0$ a $1$ (o $0\%$ a $100\%$) representaría un reto computacional y de almacenaje considerable. Algunas imágenes en escala de grises tempranas cuantificaban hasta 16 valores, lo cual implicaba un almacenaje de $4$ bits por pixel; en la medida de que la rama de la fotografía digital evolucionó, aumentó a hasta $256$ intensidades, implicando un peso de 8 bits por pixel. Si bien actualmente hay adicionales variaciones con mayor o menor número de valores (también discretos), los cuales se eligen en función de la aplicación de la imagen, un estándar recurrentemente usado es el de $256$ valores. Por eso, y en aras de respetar convenciones, se usará esta escala discreta, o bien, dependiendo del caso, la escala continua de $0$ a $1$. Para pasar de la escala $[0,1]$ a la escala $\{0, \dots , 255\}$ hacemos $e_{255}=round(255 e_{1})$; para pasar en sentido inverso se usará $e_{1}=\frac{1}{255}e_{255}$.

En este apartado se describirá cómo se procede para formular y computar los dos enfoques para reproducir imágenes: el de TSP y el de los fotomosaicos, explicados brevemente en el capítulo \ref{chapter:tsp}. Para iniciar los ejercicios se ha decidido usar una imagen de la extinta red social Twitter (ahora llamada X tras ser adquirida por otro grupo empresarial), la cual se muestra en \ref{figure:partes}. Una librería / paquete del reconocido lenguaje \textit{opensource} de programación matemática, R, encargada de procesar y graficar las imágenes de tipo png tiene por nombre \say{png}. La función $readPNG( \period)$ de la misma se encarga de leer la imagen-entrada y sintetizarlo en un objeto numérico estructurado en un arreglo $3$-dimensional con dimensiones de pixeles de renglón ($\mu$) $\times$ columna ($\nu$) $\times 3$, cada dimensión representando la cada escala de los tres colores primario en el modelo $RGB$. De los elementos extrapolados del primer componente de la dimensión tres (i.e., rojo), $readPNG( \period )[,,1]$, se extrae una matriz $\mu \times \nu$, la cual consta de valores que conforman la escala de grises de la imagen en el intervalo continuo de $0$ a $1$. Para graficar dicha imagen en el cuadrante del plano cartesiano $x-y$ (delimitado al rango $[0,1]$ para ambas dimensiones) se usará la función $grid.raster( \period )$ perteneciente al paquete \say{\textit{png}}.



\begin{figure} [h]
  \centering
   \includegraphics[width=0.4\linewidth]{orig rot raster.JPG}
  \caption{Despliegue con $grid.raster(.)$  }
  \label{figure:partes}
\end{figure}


Como siguiente paso, se usan las dimensiones de pixeles, $m$ y $n$, para delimitar el tamaño de la matriz tal que se permita generar una partición de la misma en rectángulos que sea factible; es decir, que sean rectángulos de dimensiones idénticas y que, posicionadas estratégicamente, generen la matriz grande (o matriz total). Para ello analizamos residuos de divisiones con aritmética modular para pasar de $(\mu, \nu)$ a $(\mu', \nu')$\footnote{Véase más detalle sobre las propiedades de la regla de asignación para generar esta transformación en apéndice}.


Posteriormente, se convierte la matriz de la escala $[0,1]$ a la escala $\{ 0, \dots, 255\}$. Luego, se fracciona la matriz en un conjunto de $m \; n$ rectángulos mediante la función $matsplitter(.)$ de R, la cual recibe como entradas la matriz a fraccionar, la cantidad de renglones de pixeles por rectángulo, $k=\mu ' / m$ y la cantidad de columnas,  $h=\nu ' / n$. $matsplitter( \period )$ entregará una lista de $m \times n$ elementos. Los elementos $1$ a $n$ de la lista consistirán en los primeros $n$  rectángulos superiores de la matriz, los elementos $n +1$ a $2n$ consistirán en el segundo grupo de $n$ rectángulos superiores. Así sucesivamente, hasta llegar a los $n$ rectángulos inferiores, ennumerados $n \; m-n+1$ a $m \; n$. Entendemos que este tipo de ordenamiento es de clase \textit{rowwise} (o por renglón), ya que se va llenando renglón por renglón, empezando por los renglones de arriba y continuando hacia abajo. Cada renglón se llena de izquierda a derecha. El otro tipo común de ordenamiento es \textit{columnwise}, o por columna\footnote{Arreglo por columna, o \textit{columnwise} donde se llenan las columnas de izquierda a derecha, cada columna se llena de arriba a abajo}. Conociendo esto, podemos calcular la luminosidad promedio de cada elemento del output de $matsplitter( \period )$ computado como un promedio aritmético del total de pixeles que compone a cada rectángulo. Dicho conjunto de luminosidades puede sintetizarse en un vector de dimensión $m \; n$, bajo la ya mencionada lógica del ordenamiento \textit{rowwise}.


\section{Fotomosaicos}\label{sec:photomImplem}

\subsection{Fotomosaicos en blanco y negro}\label{sec:photomImplem_grey}

\subsubsection{Construcción del vector de costos y la Matriz Perfecta}

Posterior a reproducir los pasos descritos en la sección \ref{sec:partic}, se procede a convertir la escala del conjunto $\{0, \dots , 255 \}$ a $[0,1]$ dividiendo entre $255$ (ver primer párrafo de la sección referida). Llámese $h$ al vector resultante de extraer estas escalas promedio de los rectángulos ordenados con base en el esquema \textit{rowwise}. Supóngase que las dimensiones de las imágenes / mosaicos que compondrán el fotomosaico son cuadradas, de valor $pi \times pi$. Entonces, generaremos tres arreglos importantes: uno de parámetros de costos, dos de escalas de grises. El primero será uno numérico  $3$-dimensional de tipo $cf \times m \times n$, llámese $A$, con $A[f,i,j]=c_{fij}$, donde el lado derecho es el mismo ponderador de costos de la expresión \eqref{unoM}. Uno de los arreglos en escala de grises será de dimensión $m \times n$, tendrá por nombre $mp$, por \say{matriz perfecta}; esto es un eufemismo por tratarse de la mejor representación factible de una imagen con las dimensiones de cantidades de rectángulos, $m \times n$, que se ingresan como \textit{input}; el otro, será un arreglo de $(m \; pi) \times (n \; pi)$ y será $MF$, por \say{matriz final}. Además, se contará con una dotación de $\sum_{f=1}^{cf } u_{f}$ imágenes de solo $cf$ tipos, cada uno matricialmente denotado mediante $Mg_{f}$, o \say{matriz de \textit{grayscales}} de la imagen tipo $f$. 

Existe un bucle que ayuda convertir la información plasmada en el arreglo $A$ (de tres dimensiones) en un \textit{data frame}, $df3$ (de una dimensión) en cuya construcción se involucran los campos siguientes: $t, i, j, f, ce$ \footnote{La forma genérica de dicho arreglo $2$-dimensional se explica y se esboza con mayor detalle en el apéndice}. En este esquema, cada $t$ se asocia a exactamente una combinación $(i, j, f)$ y a cada terna $(i, j, f)$ le corresponde una sola $t$ (por tanto, hay un mapeo biyectivo). Este remapeo atiende un pendiente importante, permitiéndose que la librería elegida, ($lpSolve$), para computar el problema de programación lineal, admita los argumentos aportados. A continuación se describe cómo se llenan los arreglos mencionados. 


\begin{enumerate}
\item Tomamos el número de iteración, $t$, y le asignamos su correspondiente coordenada matricial, $(i(t), j(t))$ deducida por el esquema \textit{rowwise} (previamente descrito).

\item Obtener la escala $[0,1]$ de luminosidad del elemento $(i, j)$, $h_{t}$; es decir, el valor promedio del correspondiente rectángulo. 

\item Obtener la diferencia cuadrática de las luminosidades; es decir, la que hay entre $h_{t}$ y cada elemento del vector de luminosidades promedio de las $cf$ figuras disponibles, llámese $lumP$. Esto es hacer $[ (h_{t}-lumP_{f} )^{2} ]_{f \in F  } \in [0,1]^{cf}$. Para cada $f$, asignar el valor de este vector a los elementos $A[i,j,]$ del arreglo $A$.

\item Asignar el valor $h_{t}$ a la posición $(i, j)$ de la matriz perfecta. 

\end{enumerate}


Es importante considerar que el orden del mapeo $i, j, f$ a $t$ también debe guiar la construcción de la matriz con los dos tipos de restricciones denotados en la formulación del problema. 

\subsubsection{Adaptación a módulo lpSolve y redimensionamiento}


La mayoría de módulos en el \textit{open source} perciben el vector de costos de un programa lineal de una única dimensión; el planteamiento desglosado en el capítulo \ref{chapter:photom} plantea tres dimensiones. Por lo tanto hay que construir un arreglo que descomponga toda la información en uno solo pasando de $A$ a $df3$, la construcción de este arreglo se ve explicada en el Apéndice (ver \ref{reshp}). Llevado al universo de programación en $R$, y con ayuda de esta $df3$ podemos definir el modelo en un objeto de clase \say{lp}, auxiliándonos en el módulo $lpSolve$. Dicho objeto se basa en (a) un vector de pesos o costos, $ce$, (b) una instrucción de optimización, $io$: \say {minimiza} o \say{maximiza} (en este caso se minimiza), (c) una matriz $RM$ de restricciones con dimensiones $re \times (m \;n \;f)$ que representa a las $re$ restricciones existentes sobre las variables, (d) un vector de lados derechos, $rh \in \mathbb{R}^{re}$ con el valor contra el cual será contrastada la combinación lineal de $x$, $RM[t,] \cdot x$, (e) un vector de carácteres, $sign$, con el cual la restricción t-ésima será   $RM[t,] \cdot  x \; \say{sign[t]} \; rh_{t}$, con $sign \in \{\say{<} ,\say{\leq}, \say{>},\say{\geq}, \say{=}  \}$.


\subsubsection{Holgura y variabilidad: Construcción del vector de disponibilidades}

Hay que construir un vector, $u$ que cuantifique las dotaciones disponibles de las $cf$  figuras. Estas dotaciones pueden responder a tantas clases de formulamientos como pueda imaginarse el programador; como una observación conveniente, siempre será necesario definirlo tal que la región factible sea no vacía. El planteamiento de $u$ aquí especificado es propuesta original de esta tesis. Para ello, nos valemos de dos parámetros: el primero, $hd$, de \say{holgura}, que nos dirá qué tantos más de los mosaicos estrictamente necesarios tendremos. Ejemplo: si $hd=0.1$, tendremos aproximadamente $10\%$ más de los mosaicos exactamente suficientes para llenar los $m n$ espacios habilitados. Para garantizar la viabilidad del problema, $hd$ debe ser estrictamente no negativo ya que, de no cumplir esto, no se tendrías mosaicos suficientes para llenar los rectángulos habilitados, dando lugar a un problema con región factible vacía. 

Si deséaramos que las disponibilidades de cada mosaicos fueran las mismas para todas, tendríamos $\ceil{\frac{ m\;n(1+hd)}{cf }}$ imágenes de cada tipo. Sin embargo, para darle mayor variabilidad a estas disponibilidades introducimos el segundo parámetro $vd$, que denota variabilidad, y nos permitirá tener una dotación del mosaico $f$ extraída aleatoriamente (utilizando distribución uniforme) de entre el siguiente conjunto de enteros consecutivos, $ u_{f} \in \{  \ceil{\frac{ m\;n(1+hd)}{cf} (1-vd) } , \dots ,   \ceil{\frac{ m\;n(1+hd)}{cf} (1+vd) } \}$. A mayor $vd \in [0,1]$, y suponiendo una correcta simulación aleatoria, mayor será la varianza de las disponibilidades de cada tipo de mosaico en el vector $u$. Implicando que habrá una mayor diferencia entre dotaciones del tipo de mosaico más común (o poblado) versus el menos común.


Con lo mencionado hasta este punto se han generado los parámetros necesarios y suficientes para definir el modelo. Sigue discutir cómo se despliega la solución y evaluar la eficiencia de la misma. 


\subsubsection{Identificación de solución para cada rectángulo y despliegue del resultado}


Si bien el problema no fue restringido a enterez, el resultado es entero y consta únicamente de $0$'s y $1$'s. Si extraemos únicamente los valores $T=\{t | x_{t}=1  \}$ se valida que las $m\;n$ combinaciones $(i,j)$ son cubiertas exactamente una única vez cada una y que cada figura en $F$ se ocupa en una cantidad de ocasiones que no excede su correspondiente límite definido en el vector $u$. Habiendo supuesto que la dimensión de las $cf$ figuras es de $pi \times pi$ y sea $MG_{f} \in \mathbb{R}^{pi \times pi}$ la matriz de escala de grises de la figura $f$, entonces procedemos a llenar el fotomosaico, o matriz final $MF$, mediante el siguiente \textit{loop}: a través de $m\;n$ iteraciones hacer lo siguiente únicamente a través de las soluciones $\kappa \in T$. 

\begin{enumerate}
\item Extraemos el $\kappa$-ésimo vector-renglón.$S_{\kappa}=dfSel[\kappa, ]$. Esto implica una $(i, j, f)$ correspondiente. 

\item Ahora hay que definir la posición de la figura, $f$ en la matriz final. Definimos el pixel superior izquierdo de la figura $f$ sobre la misma, $MF[rI, cI]$. Sígase que $rI=(  i-1 )pi+1$ y  $cI=( j-1 )pi+1$

\item Sigue definir al resto de la figura que llenará la posición $(i, j)$. Se asigna el valor de $MF_{f}$ a la submatriz-rectángulo de pixeles con el extremo superior izquierdo en $(rI, cI)$; esto es, $MF[\{rI, \dots ,  rI+pi-1 \}, \{cI, \dots ,  cI+pi-1 \}]=MG_{f}$

\end{enumerate}

Se puede validar que este procedimiento llena por completo y con valores factibles a la matriz $MF$, y de manera óptima desde el enfoque de la distancia de \textit{grayscales}. 


El siguiente paso es ejecutar los pasos descritos hasta este punto de la sección usando una gama de imágenes cuadradas y buscando emular el logo de Twitter. Para ello, se generó un código de $R$ que lee todos los archivos png de una subcarpeta y extrae sus dimensiones (pixeles). Posteriormente, elige la mínima dimensión (de entre columnas y renglones) del conjunto de imágenes, acota a todas las imágenes de manera que cumplan con esta dimensión a lo largo y ancho y guarda su luminosidad promedio. Además, define un intervalo de luminosidad, $i=1/ cf$, con $cf \in  \mathbb{N}$ sobre el cual se seleccionará la imagen. Esto es, si $i=0 \period 05$ entonces las figuras se clasificarán en $cf=20$ categorías, a saber, $\{[0,0 \period 05), [0 \period 05,0 \period 10) , [0 \period 10,0 \period 15),  \period  \period  \period  , [0 \period 90,0 \period 95), [0  \period  95,1] \}$. Para el primer ejercicio extraemos las imágenes de un conjunto de $60$ fotos de una cuenta de Instagram. Al computar su luminosidad se encuentra que las $20$ categorías no son todas cubiertas, estando las imágenes acotadas en luminosidades entre $0 \period 30$ y $0 \period  75$. Para hacer que la cantidad de categorías cubiertas sea de $20$ entonces se oscurecen o iluminan tantas más imágenes como categorías falten por cubrir. El resultado de hacer la selección de $20$ imágenes, ordenadas por luminosidad de menor a mayor, se muestra a continuación. 


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{catalogoFin.png}
  \caption{Catálogo de imágenes seleccionadas para el fotomosaico  }
  \label{catal}
\end{figure}


Habiendo seleccionado las imagenes, se procede a reproducir el ejercicio de los fotomosaicos. Al hacerlo con $hd=0 \period 3$ y $vp=0 \period 3$, podemos desplegar la imagen resultante con dimensiones $15 \times 15$ y $20 \times 20$ en la figura \ref{fig:dos figurasIn} usando la función $grid.raster( \period )$.


 
  \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittMos15.png}
         \caption{Fotomosaico: $20$ tipos de figuras,  $15 \times 15$ mosaicos}
         \label{fig:fig15m}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittMos20.png}
         \caption{Fotomosaico: $20$ tipos de figuras,  $20 \times 20$ mosaicos}
         \label{fig:fig20m}
     \end{subfigure}
     \hfill
        \caption{Soluciones gráficas al problema de los fotomosaicos con $dp=0 \period 3$ y $vp=0 \period 3$; 
        dimensiones $15 \times 15$ y $20 \times 20$
        }
        \label{fig:dos figurasIn}
\end{figure}




Para instancias con dimnensiones mayores también hubo despliegues, los cuales se encuentran en \ref{fig:dos 3560}.



 \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittMos35.png}
         \caption{ Dimensiones $35 \times 35$}
         \label{vfig;partes35}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittMos60.png}
         \caption{ Dimensiones $60 \times 60$}
         \label{vfig;partes60}
     \end{subfigure}
     \hfill
        \caption{Soluciones gráficas al problema de los fotomosaicos con c; 
        dimensiones $35 \times 35$ y $60 \times 60$
        }
        \label{fig:dos 3560}
\end{figure}



Claramente el resultado ha mostrado ser, visualmente, eficiente. La matriz $mp$ sirve como referencia para ver cómo se vería la imagen si se deseara desplegar la mejor representación posible de la imagen original contando exactamente con dimensiones de pixel $m \times n$. El resultado se muestra en figura \ref{fig:dos figurasPerf}. 




 \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{mp15.png}
         \caption{Matriz perfecta, dimensiones  $15 \times 15$}
         \label{fig:mper15}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
     \centering
         \includegraphics[width=\textwidth]{mp20.png}
         \caption{Matriz perfecta, dimensiones  $20 \times 20$}
         \label{fig:mper20}
     \end{subfigure}
     \hfill
        \caption{Matrices perfectas basadas en luminosidades promedio de submatrices-rectángulo
        }
        \label{fig:dos figurasPerf}
\end{figure}



Procedemos a evaluar la complejidad computacional del algoritmo de resolución del programa lineal. Para ello, registramos el tiempo que lleva resolver para la función $lp(.)$ una determinada imagen conforme se agregan más dimensiones o rectángulos. Cabe recalcar que los tiempos registrados contabilizan el esfuerzo del algoritmo de $lp(.)$ y no los procesamientos (que pueden ser bastante robustos) para construir las matrices y vectores que definen el problema, así como para desplegar el resultado final.

Las gráficas \ref{fig:complejidadfm} y tablas reflejan la relación que tiene la dimensión (suponiendo que hay tantos rectángulos a lo largo como a lo ancho) con el tiempo de cómputo requerido para generar la imagen de Twitter; también, la que hay entre el total de rectángulos (la dimensión al cuadrado) y el tiempo. Vale la pena mencionar que con la función $lpSolve$, $R$ abortó al llegar a la ejecución de dimensión $60$; sin embargo las gráficas desplegadas y sus estimaciones lineales, cuadráticas y cúbicas dan a entender que la ejecución es cuando menos de orden $3$ en el número de rectángulos ingresados como parámetro objetivo. Esto se explica por las gráficas de \textit{fit} (en particular \ref{fig:complr}), donde es eviente que el comportamiento dista de ser lineal y tiene un ajuste cuadrático extraño (el que tenga su vértice en valores de rectángulos \say{negativos} es absolutamente contraintuitivo). No es sino hasta el estimado cúbico que se distingue una relación asociable. 

 
\begin{figure}[h]
    \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{dim_tiempo fm.png}
         \caption{ Dimensión vs tiempo}
         \label{fig:compld}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{rec_tiempo fm.png}
         \caption{ Rectángulos vs tiempo}
         \label{fig:complr}
     \end{subfigure}
     \hfill

     \caption{Graficaciones tiempos de ejecución}
     \label{fig:complejidadfm}
     
\end{figure}

\begin{center}
%\begin{tabular}{c*{6}{c}r}
\begin{tabular}{*{5}{p{2cm}}}
Renglones (= Columnas) & Total mosaicos &   Tiempo de ejecución (s) & Variables & restricciones  \\
\hline
15 &  225 & 0.45 & 4,500 & 245  \\
20 &  400 & 0.52 & 8,000 & 420 \\
25 &  625 & 1.12 & 12,500 & 645  \\
30 &  900 & 2.36 & 18,000 & 920  \\
35 &  1,225 & 4.42 & 24,500 & 1,245 \\ 
40 &  1,600 & 12.12 & 32,000 & 1,620  \\
45 &  2,025 & 21.28 & 40,500 & 2,045  \\
50 &  2,500 & 28.29 & 50,000 & 2,520  \\ 
55 &  3,025 & 40.49 & 60,500 & 3,045  \\
60 &  3,600 & 64.45 & 72,000 & 3,620 \\
\end{tabular}
\end{center}


\begin{center}
%\begin{tabular}{c*{6}{c}r}
\begin{tabular}{*{5}{p{2cm}}}
Renglones (= Columnas) & Total mosaicos &   Valor óptimo, $z^{*}$ &  Valor $z^{*}$, vs valor max (\%)  \\
\hline
15 &  225 & 6.77 & 3.0\% \\
20 &  400 & 10.3 & 2.6\% \\
25 &  625 & 20.3 & 3.2\%  \\
30 &  900 & 26.3 & 2.9\%  \\
35 &  1,225 & 29.9 & 2.4\%  \\ 
40 &  1,600 & 40.4 & 2.5\%  \\
45 &  2,025 & 64.4 & 3.2\%   \\
50 &  2,500 & 88.3 & 3.5\%   \\ 
55 &  3,025 & 99.6 & 3.3\%   \\
60 &  3,600 & 117 & 3.3\%  \\
\end{tabular}
\end{center}

La tabla de valores óptimos de la función objetivo,  $z^{*}$, introduce una interrogante interesante; ¿qué tan buena o mala es el valor del óptimo, $z^{*}$, las instancias trabajadas? La respuesta para estos ejercicios depende: es natural pensar que a mayor sea la cantidad de rectángulos a reproducir, más amplio será el rango de valores de la función objetivo ya que cada el \say{costo} de desplegar el mosaico $f$ en el rectángulo $(i,j)$ es una diferencia cuadrada de valores, ambos entre o y 1, teniendo por lo tanto un valor máximo de 1. Por lo tanto, el rango factible de valores de la función objetivo es de 0 al número total de rectángulos, $m n$. De tal manera que, tal como podría intuirse, el valor de la función objetivo muy probablemente subirá en la medida que se amplían las dimensiones del problema. Sin embargo, la evaluación de si ello representa una buena o mala reproducción dependerá de la óptica con la que se aborde el problema. Si tomamos la $z^{*}$ resultante contra el peor escenario (aquél donde se iguala la distancia al número total de mosaicos) y midiendo eso como porcentaje, entonces puede llevarse a cabo un ejercicio más equiparable con resultados evaluados en función de la dimensionalidad del conjunto de rectángulos. Y visto desde esta métrica, en la cuarta columna se puede observar que el valor de la función objetivo se encuentra entre $2.5\%$ y  $3.5\%$ de su máximo posible.

Una cuestión interesante de abordar es el atributo de escasez de mosaicos en el problema, el cual se concentra en el vector de disponibilidades, $u$. Inspeccionando visualmente la imagen original, o inclusive la versión de $mp$ de la misma, se puede observar que todos los contornos de la imagen (alrededor del pájaro) tienen la máxima luminosidad disponible (es decir, blanco). Esto incluye, naturalmente, a los extremos inferior derecho y superior derecho. Sin embargo, al ver el fotomosaico en figura \ref{fig:dos figurasIn}, se observa claramente que las celdas inferiores derechas tienen una luminosidad muy elevada (cercana a $1$), en tanto que la luminosidad de las superiores derechas es alta, pero claramente menor. Esto ocurre porque, si bien pudiera ser deseable que todos los contornos tuvieran el máximo de luminosidad, existe una disponibilidad limitada del mosaico más blanco, así como de todos en general. Por lo tanto, se recurre a otros mosaicos, lo menos oscuros posibles, que minimicen la suma de diferencias cuadráticas de luminosidades para cubrir el contorno del ave sin exceder los recursos existentes. Haciendo uso de los parámetros introducidos y explicados en el presente escrito, podríamos hacer el ejercicio sin limitar estos recursos. Basta indicar que $hd=m \; n$, queriendo decir que, si tuviéramos dimensiones $m\times n= 15\times 15$, entonces los mosaicos disponibles son $15^{2}=225$ y, si asignamos $hd=225$, entonces dispondremos de $22500\%$ más de los mosaicos estrictamente necesarias. Además, si $vd=0$ las disponibilidades se distribuirán homogéneamente, con lo cual garantizamos que cada tipo de mosaico tiene el potencial de llenar todo el fotomosaico con mosaicos de un solo tipo. Cabe mencionar que esta reparametrización tiene una alternativa: eliminar las restricciones del tipo definido en las expresiones \ref{unoM}. Hacer esto implicaría reducir la dimensionalidad de la matriz de restricciones, conllevando inherentemente ahorros en el cálculo de soluciones; sin embargo no se hará así, porque eso cambiaría drásticamente la estructura del código de la solución computada y podría perderse la sensibilidad del lector sobre la importancia de la holgura de disponibilidades que este escrito busca enfatizar. En \ref{fig:dos figuras} se muestra el resultado de hacer $hd=m\;n$ y $vd=0$.


  \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittMosPerf15.png}
         \caption{Fotomosaico: $20$ tipos de figuras,  $15 \times 15$ mosaicos}
         \label{fig:figp15m}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittMosPerf20.png}
         \caption{Fotomosaico: $20$ tipos de figuras,  $20 \times 20$ mosaicos}
         \label{fig:figp20m}
     \end{subfigure}
     \hfill
        \caption{Soluciones gráficas al problema de los fotomosaicos con $dp=m\;n$ y $vp=0$; 
        dimensiones $15 \times 15$ y $20 \times 20$
        }
        \label{fig:dos figuras}
\end{figure}

Claramente, estas imágenes tienen contornos más blancos y los fotomosaicos se asemejan a los resultados de usar los valores de matriz perfecta para escala de grises, \ref{fig:dos figurasPerf}, puesto que el costo total de diferencias de luminosidades promedio (valor de la función objetivo) se reduce al relajar las restricciones. Para estas instancias tenemos resultados de distancias de $0.30$ y  $0.59$ representando en ambos casos  $0.13\%$ y  $0.15\%$ del supremo del rango de la función objetivo. Recordemos que en ejercicios previos con holguras de disponibilidad más amplias estos porcentajes eran del orden del  $3\%$; es decir, hasta $20$ veces menor. De esta modificación estratégica de las restricciones realizadas en ejercicios de mismas dimensiones podemos dilucidar la sensibilidad del algoritmo diseñado y sus variaciones paraméticas sobre la calidad visual y cuantitativa de los resultados. No obstante lo anterior, es claro que no todos los $20$ tipos de mosaicos disponibles se están empleando, lo cual es indicador de que la imagen carece notablemente de variedad en escalas de intensidad lumínica, nos podría hacer perder interés en esta clase específica de instancias.

Finalmente, consideramos que vale la pena explorar la posibilidad de construir una imagen más elaborada, con mayor relieve y color que el logo de Twitter. Para ello, se propuso reproducir el ejercicio de los fotomosaicos con una imagen caricaturizada del connotado científico británico, Isaac Newton, la cual se puede encontrar en \ref{new_or}. 


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{newton_app2.png}
  \caption{Fotomosaico de Isaac Newton  }
  \label{new_or}
\end{figure}

En ejercicos anteriores ya se demostró que el algoritmo computado para este trabajo soporta composiciones de imágenes de hasta $60 \times 60$ rectángulos. Por ello, se optó por una asignación poco por debajo de ese límite, de $50 \times 50$. Reproduciendo de nueva cuenta la escala de gris del promedio en cada rectángulo, se genera el resultado de la matriz objetivo (o matriz perfecta).


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{newton degradado.jpeg}
  \caption{Fotomosaico de Isaac Newton, matriz perfecta $50 \times 50$ }
  \label{new_obj}
\end{figure}

En  \ref{fig:dos figuras}, se tienen dos resultados de nueva cuenta, de forma similar a como se trabajó con la imagen del pájaro. Un ejercicio con holgura indefinida en las dotaciones de mosaicos y otro ejercicio que exige variabilidad en las asignaciones de mosaicos sin importar que exista un mosaico geométricamente más cercano a un dado rectángulo sobre el espacio de grises. 

  \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{Newton_v50full.jpeg}
         \caption{Fotomosaico Newton: $20$ tipos de figuras,  Disposiciones no limitadas}
         \label{fig:figp50n_h}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{ Newton_v50v2.jpg}
         \caption{Fotomosaico Newton: $20$ tipos de figuras,  Disposiciones limitadas}
         \label{fig:figp50n_ch}
     \end{subfigure}
     \hfill
        \caption{Soluciones gráficas al problema de los fotomosaicos con dimensiones $50 \times 50$: Versión con holgura de  $dp=m\;n$ y $vp=0$; y sin holgura de  $dp=0 \period 3$ y $vp=0 \period 3$ }
        \label{fig:dos figuras}
\end{figure}



\subsection{Fotomosaicos a color}

En el capítulo de planteamiento del problema de los fotomosaicos se explicaba que para la aplicación a color el concepto en términos de programación lineal es idéntico y los únicos retos puntuales son: la elección de variedad de mosaicos a elegir, ya que éstos representan una dimensión superior al del escala de grises en proporciones cúbicas; la partición las $mn$ submatrices-rectángulo en tres dimensiones (es decir, lo que hace la previamente referida función $matsplitter(.)$ de $R$) y el posicionamiento del resultado final haciendo yuxtapuestos varios arreglos matriciales de dimensión tres. Sobre todo esta primera diferencia hace que no sea tan trivial el problema de reproducir el ejercicio de los fotomosaicos con cualquier imagen. Se trabaja entonces partiendo de una imagen relativamente limitada en cuanto a colores, digase la bandera de México, y a raíz de eso, selecciónense los colores a ocupar. La propuesta iniciada de la foto enfocada de una flor con fondo de intensidad mesurada en la figura \ref{fig:cuatro figuras fl_bl}  se extiende a otros colores perceptibles en la bandera nacional: rojo, verde, café; complementariamente añádese un rosa y un anaranjado para verificar que el algoritmo acierte al reservar su uso, ya que a simple vista no parecieran figurar como colores en el símbolo patrio. En \ref{fig:mex_flag}, está la foto a reproducir.



\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{mex_flaga.png}
  \caption{ Imagen objetivo: bandera de la República Mexicana  }
  \label{fig:mex_flag}
\end{figure}

En \ref{fig:flores fichas} y \ref{fig:colores fichas} respectivamente, se desglosan dos conjuntos de imágenes de flores y sus respectivos colores dominantes generados al reproducir k-medias con $k=2$



\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ve_tot.png}
         \caption{ Flores verdes}
         \label{fig:fig_vertot}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ro_tot.png}
         \caption{ Flores rojas }
         \label{fig:fig_rotot}
     \end{subfigure}
     \hfill 
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ca_tot.png}
         \caption{ Florese cafés}
         \label{fig:fig_catot}
      \end{subfigure}
       \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_na_tot.png}
         \caption{Flores anranjadas}
         \label{fig:fig_natot}
     \end{subfigure}
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ros_tot.png}
         \caption{Flores rosas}
         \label{fig:fig_rostot}
     \end{subfigure}
     \caption{Desglose de flores basada en selección manual de colores}
     \label{fig:flores fichas}     
\end{figure}



\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ve_k2.png}
         \caption{ Flores verdes}
         \label{fig:fig_verk2}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ro_k2.png}
         \caption{ Flores rojas }
         \label{fig:fig_rok2}
     \end{subfigure}
     \hfill 
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ca_k2.png}
         \caption{ Florese cafés}
         \label{fig:fig_cak2}
      \end{subfigure}
       \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_na_k2.png}
         \caption{Flores anranjadas}
         \label{fig:fig_nak2}
     \end{subfigure}
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{fl_ros_k2.png}
         \caption{Flores rosas}
         \label{fig:fig_rosk2}
     \end{subfigure}
     \caption{Desglose de color promedio o predominante de $5$ tipos de flores que, junto con las de tipo blanco conforman los mosaicos a asignar de forma óptima}
     \label{fig:colores fichas}     
\end{figure}



Habiendo seleccionado la imagen a computar y los mosaicos, se procede a generar el algoritmo de fotomosaico. Vale la pena sugerir empezar con dimensiones pequeñas, diganse $m$ y $n$ con $n>m$ ya que la bandera tiene una forma horizontal. Así pues, sea $m=15$ y $n=20$ y posteriormente $m=20$ y $n=30$ se generan los resultados de \ref{fig:res colflor}. 



\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{MexMosCol20.png}
         \caption{ Dimensiones $15 \times 20$ }
         \label{fig:mx_20_15}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{MexMosCol30.png}
         \caption{  Dimensiones $20 \times 30$ }
         \label{fig:mx_30_20}
     \end{subfigure}
    \caption{Resultado de fotomosaicos a color: bandera de la república mexicana a base de flores}
     \label{fig:res colflor}
\end{figure}


La imagen se ha computado con éxito. Como se preveía, las asignaciones están concentradas principalmente en los tres colores especificados que integran la bandera (verde, blanco, rojo y café); al computar el caso de  $20 \times 30$ se observa que las flores naranjas están desplegadas en $3$ ocasiones; esto se explica porque los contornos de la imagen cuyas submatrices-rectángulo tienen centroides en el hiperplano $RGB$ ubicado entre el verde de la encina, el laurel y el nopal y el café del águila. El rosa se aleja de las posibilidades de ser seleccionado en la medida de que es un color distante de los que componen la bandera.

Extiéndase el ejemplo de la visualización de Isaac Newton a la versión a color. Las versiones degradadas de la imagen original, en sus versiones de $40 \times 40$ se presentan en \ref{new_obj}, con dos despliegues que son fácilmente identificables



\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{newton_col_degra_30.jpg}
         \caption{ Dimensiones $30 \times 30$ }
         \label{fig:new_obj_30}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{newton_col_degra_40.JPG}
         \caption{  Dimensiones $40 \times 40$ }
         \label{fig:new_obj_40}
     \end{subfigure}
    \caption{Resultado de arreglos objetivos, versión Newton}
     \label{fig:new_obj}
\end{figure}

El primer ejercicio se realiza con la instancia de $30 \times 30$ con las mismas flores que \ref{fig:flores fichas} y los resultados se muestran en \ref{fig:new_30bs}


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{Newton_v30_bsc.JPG}
  \caption{ Imagen objetivo: Newton en dimensiones $30 \times 30$  }
  \label{fig:new_30bs}
\end{figure}


Con algo de imaginación se puede identificar que el desarrollo de esta instancia da un buen resultado. Ajusta el verde de la hoja de manzana con el verde, el rojo de la manzana con las flores rojas y naranajas y las flores cafés se posicionan en donde iría el pelo castaño del personaje. Sin embargo, no deja de ser un ejercicio limitado ya que la variedad disponible es de solo seis colores. De tal manera que se amplió la gama de flores de seis a veinte y se generaron las correspondientes ejecuciones: la de máxima holgura y la de la variación forzada en los parámetros. 


%Código: RSim mock ejer3

\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{Newton_v40_bsc_v2.JPG}
         \caption{ Dimensiones $40 \times 40$ }
         \label{fig:new_obj_30}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{Newton_v40_bsc_v3.JPG}
         \caption{  Dimensiones $40 \times 40$ }
         \label{fig:new_obj_30}
     \end{subfigure}
    \caption{Resultado de arreglos objetivos, versión Newton}
     \label{fig:colflor_new}
\end{figure}



Se observa en los resultados en \ref{new_or} que ambos ejercicios ocupan una mayor variedad de mosaicos que las instancias anteriores de Newton. Sin embargo, resulta interesante cómo en el primer ejercicio el algoritmo identificó el color del pétalo con las flores grises más que con las propias verdes claras ya mostradas. Esto se debe a que el pixel \say{promedio} de la flor gris, es decir, el gris, se encuentra cercano a muchos colores, entre ellos el verde. El segundo ejercicio tuvo como resultado una seriación de colores variados plasmados en el fondo que originalmente es color blanco. El hecho de que se colocaran yuxtapuestas bajo un patrón horizontal siendo que no existe similaridad con el blanco de algunos de estos colores (rosa, azul, vino) es un indicativo de que estas imágenes se ocuparon ahí como recurso bajo el objetivo de cumplir la asignación los mosaicos de los veinte tipos de colores en similar cuantía. Si bien el resultado es imperfecto, sí es visualmente atractivo e interesante en cuanto a problema arftístico y de programación. Además, analizando visualmente la imagen objetivo y el resultado, sí es factible relacionar que una imagen es un intento de replicar creativamente a la otra. El resultado en general sí puede considerarse exitoso puesto que se generaron imágenes con características similares. 

\subsection{Fotomosaicos con librería de R}

En el capítulo 3 se menciona que existen módulos o librerías de lenguaje de programación \textit{Open Source} con los cuales se pueden reproducir ejercicios con imágenes. Tal es el caso de R, que hace uso de su librería \textit{RSimMosaic} para, vía el módulo \textit{composeMosaicFromImageRandomOptim} generar la imagen objetivo con tres insumos mínimos: imagen objetivo, conjunto (folder) de imágenes a colocar y nombre del archivo jpg a crear como resultado. A diferencia del algoritmo que se desarrolló en este trabajo, esta librería se fija como objetivo usar tantas imágenes como sea posible. Además, iterativamente se ejecuta una acción sobre cada subrectángulo, aleatoriamente elegido, que consiste en asignarle una etiqueta mediante un algoritmo de clasificación supervisada llamado \say{k-vecinos más cercanos} donde cada elemento, o pixel, en el espacio 3 dimensional se asocia con sus k coordenadas más cercanas, cada una de éstas eligiendo por su categoría y optándose por el voto mayoritario. Tanto el componente de selección y clasificación aleatorio, como el hecho de que no se garantiza un resultado óptimo en cuanto a distancia euclideadana hacen que este programa trabaje sobre una heurística. Una de las ventajas de esto es que se puede desplegar una solución sin un costo computacional tan elevado. Una desventaja se da en cuanto a la solución ya que como se puede revisar, el resultado es menos bueno cualitativamente. De esto podría derivarse otro reto, de identificar qué parámetros pueden ajustarse para hacer una mejor reproducción de la imagen de la bandera (número de vecinos. reemplazar mosaicos en el proceso de selección, etc.). Vale la pena rescatar que este algoritmo procesa cada pixel de la imagen que se le dé, siendo esta una tarea compleja en imagenes de más de $400$ pixeles por dimensión. De manera que tuvo que hacerse el ejercicio de reducción de dimensionalidad desarrollado anteriormente de agrupar un conjunto de pixeles y asignarles su color promedio. Haciendo esto, el algoritmo logra computarse rápidamente, generando imágenes tales como se muestra a continuación. 


\begin{figure}
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{finalfile1 v30i.jpg}
         \caption{ Dimensiones $30 \times 30$ }
         \label{fig:mx_20_15}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{finalfile1 - v35i.jpg}
         \caption{  Dimensiones $35 \times 35$ }
         \label{fig:mx_30_20}
     \end{subfigure}
    \caption{Resultado de fotomosaicos a color: bandera de la república mexicana a base de flores}
     \label{fig:res colflor}
\end{figure}


Vale la pena notar que este algoritmo se fija como objetivo desplegar la mayor variedad posible de mosaicos haciendo que en la misma se haga uso de los colores naranja y rosa, que tienen poca relación con la bandera de México. Además la asignación es, como dice el nombre aleatoria, por lo cual sucesivas reproducciones del mismo código darán un resultado diferente.


\section{Arte con el agente viajero}\label{sec:tspImplem}

\subsection{Arte con el agente viajero, caso Twitter}\label{ssec:tspImplem tw}


Tras haber seguido los pasos de la sección \ref{sec:partic} lo siguiente consiste en convertir la escala del conjunto $\{0, \dots, 255\}$ a la escala $\{0, \dots , \gamma \}$, empleando la ecuación \eqref{oscG} desglosada en la sección  \ref{sec:tspDescrip} de la presente tesina. Así pues, obtenemos un vector de dimensión $m \; n$, llámese $g$. Para el primer ejercicio, asígnese $\gamma=7$. Bajo esta $\gamma$, las escalas primera a treintaiseisava de luminosidad coinciden con la escala $7$ en oscuridad (o siete \say{ciudades}). Las siguientes luminosidades (por orden) corresponden a seis ciudades; sucesivamente, hasta llegar a la escala 255, que corresponde a cero ciudades. Es obvio que situar más puntos, o ubicar más aristas que conecten éstos en un rectángulo generará una mayor oscuridad en el mismo, de ahí que se considere a $\gamma$ como una escala de oscuridad. Lo siguiente consta en ubicar las ciudades en el plano $x-y$, haciendo un loop a través de las $m \; n$ matrices. 


\begin{enumerate}
\item La asignación del k-ésimo elemento de la lista $\{1, \dots , m \; n \}$ a una coordenada de matriz $(i,j)$ se rige por el siguiente pseudocódigo, el cual tiene como base el tipo de arreglo \textit{rowwise}. 


$
mod2=k mod(n) \\
si \; mod2=0 \\
entonces \; i =mod2 \\
e \period o \period c \period \\
         i=mod2\\
j=\frac{(k-i)}{n}+1
$

\item Una vez que tenemos la asignación $k \mapsto (i, j)$, $(i(k), j(k) )$, el siguiente paso es plasmar los puntos que asemejarán a la imagen objetivo sobre el rectángulo $[0,1]\times[0,1]$ en el plano $x-y$. Para ello, vale la pena considerar que el extremo superior izquierdo de la imagen corresponde al elemento $(1,1)$ de la matriz y a la coordenada $(0,1)$ del plano $x-y$. Partiendo de aquí, deducimos la posición del extremo superior izquierdo de la coordenada genérica $(i,j)$ de la matriz. La coordenada $x$ corresponde al pixel con la columna $j$, representando un paso de $\frac{(j-1)}{n}$ a la derecha de $x=0$. La coordenada $y$, con el renglón $i$, corresponde su ubicación en el eje $y$ a un paso de $\frac{(i-1)}{m}$ unidades abajo de $y=1$. Bajo esta formulación, derivamos que cada rectángulo (asociado a una submatriz) tendrá un ancho $\frac{1}{n}$ y un largo de $\frac{1}{m}$. Bajo este planteamiento se puede demostrar que para todo par de coordenadas de matriz de tipo $\{(i, j), (i+1, j)\}$ o  $\{(i, j), (i, j+1)\}$ existirá una relación de adyacencia entre sus correspondientes rectángulos. Además, las esquinas de la figura que envuelve a este conjunto de $m \; n$ rectángulos serán las coordenadas $\{(0,1), (1,1), (0,0), (1,0)\}$. Con esto, garantizamos que los rectángulos mencionados conforman una partición del cuadrado $[0,1] \times [0, 1]$

\item El siguiente paso es usar el valor entero $g_{k}=g[k]$ para colocar esa cantidad de ciudades en el rectángulo asociado a la coordenda $(i(k), j(k) )$. Una alternativa inmediata es colocarlas aleatoriamente, lo cual muy probablemente permitiría reproducir la imagen con buena similaridad. Sin embargo, se propuso hacer una asignación de coordenadas más razonada que obedece a la idea de hacer una buena distribución de las ciudades a lo largo y ancho de su correspondiente rectángulo. Con una \say{buena} distribución se busca dar a entender que se quiere evitar una excesiva concentración de las ciudades en una zona del rectángulo, dejando a otras zonas muy blancas (o sin ciudades). La idea propuesta, pues, es generar un \textit{grid} de coordenadas $\{ x_{0}, x_{1}, \dots , x_{10}  \}$ donde $x_{0}$ y $x_{10}$ corresponden a los extremos izquierdo y derecho del rectángulo y $x_{l+1}-x_{l}=q \forall l \in \{0, \dots ,9 \}$ ($q=\frac{1}{10n}$); otro grid para las coordendas $y$: $\{ y_{0}, y_{1}, \dots, y_{10}  \}$, con $y_{p+1}-y_{p}=r \forall p \in \{0, \dots  ,9 \} $ (  $r=\frac{1}{10m}$ ) con $y_{0}$ y $y_{10}$ extremos superior e inferior.  Con esto, ya habremos construido el \textit{grid} $2$-dimensional $G=\{  (x_{i}, y_{i}) | (i,j) \in \{   0, \dots, 10 \}^{2} \}$ que consiste en $121$ coordenadas. Sobre este conjunto de coordenadas aplicar un k-medias con $g_{k}$ centroides. Una buena asignación de ciudades que cumple la condiciones deseadas (y previamente descritas) es aquella que asocia un centroide a una ciudad. Se procede a guardar esta asignación de ciudades y añadirlas a la selección correspondiente a rectángulos anteriores (si es que hay anteriores).

\end{enumerate}

 Al iterar este proceso las $m \; n$ veces, se obtienen las $\sum_{k=1}^{m \; n } g_{k}=\tau$ \footnote{esta es una expresión equivalente a la ecuación ec.\eqref{totalCiudades}  , pero en la versión que mapea $(i,j) \rightarrow k(i,j)$ }  ciudades objetivo y podemos resolver el TSP sobre éstas. Los resultados de escribir todas las ciudades como puntos bajo los ejercicios con $15 \times 15$ rectángulos y ($606$ ciudades) y con $50 \times 50$ ($5,765$ ciudades) se desglosan en la imágen que se nombra \say{puntillismo}, \ref{fig:tw puntillismo}, por su similitud con la técnica artística que despuntó de manera importante en Francia a inicios del siglo XX y consiste en generar una obra con puntos diminutos. 


\begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twitt15.png}
         \caption{ $15 \times 15$ rectángulos o $606$ ciudades}
         \label{fig:fig15}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twitt50.png}
         \caption{$50 \times 50$ rectángulos o $5,765$ ciudades}
         \label{fig:fig50}
     \end{subfigure}
     \hfill
        \caption{Gráfica de los puntos sobre el cuadrante $x-y$}
        \label{fig:tw puntillismo}
\end{figure}
 
 

 
 Existe un tipo de archivo cuya extensión es \say{.tsp}. Éste se basa en el conjunto de ciudades sobre el que se ha de resolver una instancia del problema lineal. Dicha solución puede procederse mediante distintos métodos o heurísticas y puede realizarse mediante diversos \textit{softwares}, algunos de los cuales son R, Python, Java y Concorde. En aras de practicidad, y en vista de que hasta el momento la construcción de los rectángulos y las ciudades se ha llevado a cabo con R, se usará este lenguaje para manipular tanto objetos como archivos de tipo TSP. Para este efecto se usará la librería homónima cuya función, $ETSP( \period )$ debe su nombre a \textit{Euclidean TSP} y convierte el \textit{data frame} de $2$ columnas (una por coordenada) y $\tau$ renglones (uno por ciudades) en un problema del agente viajero. El \textit{Euclidean} obedece a que, en otros potenciales ejercicios del agente viajero, las coordenadas podrían ser de otra métrica sobre un espacio normado o incluso, coordenadas terrestres. La función encargada de resolver un etsp es $solveTSP(\period)$. Si bien se le puede ingresar el método o algoritmo a emplear como entrada de la función, el que se usa por \textit{default} es el algoritmo de inserción arbitraria con refinamiento de tipo \textit{two opt}. Como dice el término \say{heurística}, el \textit{two opt} no garantiza un máximo global pero sí una ejecución rápida y localmente óptima de la solución. El tipo de datos del \textit{output} es doble: uno es de la clase \textit{tour} y otro es entero. La versión como entero consiste en el orden de las ciudades que se anidan para construir el \textit{tour}. Con ello se puede graficar la solución con ayuda de $ggplot( \period )$. Los resultados con $15 \times 15$ y $50 \times 50$ se despliegan en \ref{fig:solve tsp}. 
 
 
  \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittRes15.png}
         \caption{ $15 \times 15$ rectángulos o $606$ ciudades; solución vía TSP}
         \label{fig:fig15r}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittRes50.png}
         \caption{$50 \times 50$ rectángulos o $5,765$ ciudades; solución vía TSP}
         \label{fig:fig50r}
     \end{subfigure}
     \hfill
        \caption{Gráfica de las líneas uniendo a los puntos de manera eficiente sobre el cuadrante $x-y$}
        \label{fig:solve tsp}
\end{figure}

En el punto 3 de los pasos del instructivo en la subsección \ref{ssec:tspImplem tw} se describe la lógica de la distribución de ciudades \say{uniforme} propuesta. Sin embargo, alternativamente se puede evaluar el resultado de aleatorizar las coordenadas de puntos del rectángulo, respetando las escalas de color definidas por rectángulo (y por lo tanto, manteniendo el número de ciudades). Para ello se ocupó la función de distribución uniforme desarrollada por $R$, $runif(.)$ dos veces por rectángulo: una vez para la dimensión $x$ y otra para la dimensión $y$.  Los resultados de puntillismo y conexión de ciudades para dimensiones $15$ y $50$ con $606$ y $5,765$ ciudades respectivamente se despliegan en los conjuntos de imágenes \ref{fig:tw puntillismo rdm}  y  \ref{fig:solve tsp rdm}. 


\begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittRdm15.png}
         \caption{ $15 \times 15$ rectángulos o $606$ ciudades, ejercicio aleatorio}
         \label{fig:figrdm15}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittRdm50.png}
         \caption{$50 \times 50$ rectángulos o $5,765$ ciudades, ejercicio aleatorio}
         \label{fig:figrdm50}
     \end{subfigure}
     \hfill
        \caption{Gráfica de los puntos sobre el cuadrante $x-y$, ejercicio aleatorio}
        \label{fig:tw puntillismo rdm}
\end{figure}
 
 

 
  \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittResRdm15.png}
         \caption{ $15 \times 15$ rectángulos o $606$ ciudades, ejercicio aleatorio; solución vía TSP}
         \label{fig:fig15r_rdm}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{twittResRdm50.png}
         \caption{$50 \times 50$ rectángulos o $5,765$ ciudades, ejercicio aleatorio; solución vía TSP}
         \label{fig:fig50r_rdm}
     \end{subfigure}
     \hfill
        \caption{Gráfica de las líneas uniendo a los puntos de manera eficiente sobre el cuadrante $x-y$, ejercicio aleatorio}
        \label{fig:solve tsp rdm}
\end{figure}


El nivel de detalle en la dimensión $50$ da pie a que la calidad y propiedades de los ejercicios sean visualmente similares entre los casos de distribución \say{uniforme} regida por k-medias  frente al de distribución aleatoria (contrastar imagen \ref{fig:fig50r} contra \ref{fig:fig50r_rdm}). La diferencia importante se detecta al comparar ambos tipos de planteamientos con dimensión $15$: se observa cómo la conexión entre puntos en el caso aleatorio no tiene una forma visiblemente tan bien definida; es decir, no es trivial deducir que se trata de una silueta de un pájaro, cosa que en el caso \say{uniforme} sí se observa de forma más evidente (contrastar imagen \ref{fig:fig15r} contra \ref{fig:fig15r_rdm}).

Finalmente, como se ve en \ref{fig:tw_tsp_85} el ejercicio se hace extensivo a la versión más grande que se logró correr del $TSP$ con $85$ rectángulos y $15,311$ ciudades.

\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{twittRes85.png}
  \caption{  $85 \times 85$ rectángulos o $15,311$ ciudades; solución vía TSP }
  \label{fig:tw_tsp_85}
\end{figure}


\subsection{Arte con el agente viajero, complejidad y exploración de instancias más complejas}


Un siguiente paso interesante consiste en evaluar la potencia computacional del solver del tsp en $R$ que se ha ocupado (módulo \textit{tsp}, función $solve_TSP(.)$ ) al registrar el tiempo que lleva resolver una determinada imagen conforme se agregan más dimensiones o rectángulos y, naturalmente, más ciudades. 



%La siguiente es la tabla asociada a la gráfica anterior. Vale la pena mencionar que la columna de restricciones supone la técnica de reducción de restricciones a los subtours de Miller-Tucker-Zemlin que asume que son $n^{2}$ y no $2^{n}$ de estas restricciones


La tabla \ref{tbl: tiempo tsp} asocia la dimensión única (rectángulos a lo largo igualan a los que hay a lo ancho) con el número de ciudades en la imagen de Twitter; asimismo describe la relación del número de ciudades con el tiempo de solución del TSP; claramente esta relación es de una complejidad superior a la lineal. Vale la pena mencionar que la columna de restricciones supone la técnica de reducción de restricciones a los subtours de Miller-Tucker-Zemlin que asume que son $n^{2}$ y no $2^{n}$ de estas restricciones. 
 
\clearpage
\begin{center}
%\begin{tabular}{c*{6}{c}r}
\begin{tabular}{*{5}{p{2cm}}}
Renglones (= Columnas) & Total ciudades &   Tiempo de ejecución (s) & Variables & restricciones  \\
\hline
10 &  286 & 0.00 & 81,796 & 82,368   \\
15 &  606 & 0.04 & 369,664 & 370,880\\
20 &  1,051 & 0.16 & 1,104,601 & 1,106,703 \\
25 &  1,670 & 0.83 & 27,889,00 & 2,792,240  \\
30 &  2,284 & 2.46 & 52,166,56 & 5,221,224\\ 
35 &  3,058 & 5.83 & 9,351,364 & 9,357,480 \\
40 &  3,894 & 15.67 & 15,163,236 & 15,171,024   \\
45 &  4,723 & 29.56 & 22,306,729 & 22,316,175\\
50 &  5,765 & 61.31 & 33,721,249 & 33,732,863 \\
55 &  7,360 & 182.34 & 54,169,600 & 54,184,320  \\
60 &  8,271 & 221.77 & 68,409,441 & 68,425,983\\ 
65 &  9,616 & 309.78 & 92,467,456 & 92,486,688 \\
70 &  10,987 & 433.37 & 120,714,169 & 120,736,143 \\
75 &  13,149 & 1096.58 &  172,896,201  & 172,922,499 \\
80 &  15,327 & 2268.22 &  234,916,929 & 234,947,583 \\
85 &  15,311 & 1922.58 &  234,426,721 & 234,457,343 \\
\end{tabular}
\label{tbl: tiempo tsp}
%\caption{Tiempos de ejecucion de la función solve_TSP(.) a las instancias definidas por la dimensión}
\captionof{table}{Tiempos de ejecucion de la función $solve_TSP(.)$ a las instancias definidas por la dimensión}
\end{center}
\clearpage



Algo que resalta a la vista de observar la tabla de arriba es que el número de ciudades crece respecto a la dimensión a tasas crecientes en una curva \say{suave}  hasta antes de pasar de $80$ a $85$; vale la pena observar la gráfica en \ref{fig:dim_cit} para concluir que es en este intervalo donde ésta empieza a manifestar quiebres. Éstos podrían deberse a que en la medida de que el largo y ancho en rectángulos de la imagen se aproximan a los pixeles reales de la misma van a existir transiciones de dimensiones donde algunos pixeles reciben asignaciones de escalas de grises mayores en tanto que otros disminuyen. En el balance, a pesar de que se tienen más rectángulos, serán más los rectángulos que reducen su métrica de oscuridad que aquellos que la aumentan. Esto al grado de que en algunas transiciones se disminuya el total de ciudades resultante (la gráfica muestra cómo eso ocurre tres veces en el rango analizado). Otra de las consideraciones es que, tal como se explica en el apartado de partición de rectángulos, \ref{sec:partic}, la dimensión original se va recortando a lo largo y a lo ancho de tal manera que ambas sean divisibles entre el \textit{input} entregado. Esto da lugar a que las matrices objetivo difieran en dimensión. La dimensión original de la imagen de Twitter es de $450 \times 550$ en tanto que para ajustarse a dimensiones $80$ y a $85$ se tuvo que pasar a $400 \times 480$  y $425 \times 510$ respectivamente. Por consiguiente los rectángulos tienen formas, oscuridades y estructuras distintas dando lugar a ciudades con cardinalidades poco predecibles.


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{dimension ciudades.png}
  \caption{ Dimensión vs ciudades generadas. Rangos donde se reduce la cantidad de ciudades se resalta en amarillo}
  \label{fig:dim_cit}
\end{figure}



%Las siguientes gráficas reflejan la relación que tiene la dimensión (suponiendo que hay tantos rectángulos a lo largo como a lo ancho) con el número de ciudades en la imagen de Twitter; asimismo describen la relación del número de ciudades con el tiempo de solución del tsp; claramente esta relación es de una complejidad superior a la lineal. 

Similar a lo realizado  en el capítulo de implementación para fotomosaicos, \ref{sec:photomImplem_grey}, se reproducen las gráficas asociadas a la tabla anterior en \ref{fig:complejidadtsp}. Se añaden los correspondietes ajustes polinomiales. A diferencia de el caso de los fotomosaicos donde bastaban los ajustes cúbicos, en este ejercicio fue hasta llegar a los ajustes de orden $6$ y $4$ para dimensión y rectángulos respectivamente, que se logró un ajuste suave, consistente e intuitivo.


\begin{figure}[h]
    \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{dim_tiempo tsp.png}
         \caption{ Dimensión vs tiempo}
         \label{fig:compld_tsp}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{rec_tiempo tsp.png}
         \caption{ Rectángulos vs tiempo}
         \label{fig:complr_tsp}
     \end{subfigure}
     \hfill

     \caption{Graficaciones tiempos de ejecución}
     \label{fig:complejidadtsp}
     
\end{figure}

 
Sin embargo existe un componente que vale la pena precisar si lo que se busca es comparar el tiempo de ejecución de las instancias de programación lineal genérico vs el del módulo que trabaja el TSP. Y es que el problema aquí versa sobre  las ciudades distribuidas sobre los rectángulos (y sus correspondientes distancias mutuas) y no sobre el número de rectángulos en sí. Adicionalmente, se puede decir que los primeros crecen polinomialmente en función de las segundas. Interesa por lo tanto conocer el comportamiento del tiempo de ejecución conforme crecen las ciudades. La gráfica demuestra cómo, similar al caso de la relación rectángulos vs tiempo, basta el polinomio de grado $4$ para estimar una relación en ciudades vs tiempo. 


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{cit_tiemp.png}
  \caption{Relación ciudades vs tiempo tsp  }
  \label{fig:cit_t}
\end{figure}


Una cuestión que vale la pena abordar es la relativa a si el algoritmo programado es capaz de reproducir imágenes de un grado más elevado de complejidad, o se limita a ser aplicable solo a imágenes sin relieve, ni dimensión, ni variedad de colores. Para este efecto buscaré reproducir una foto mía en mi escritorio de casa, la foto tendrá por nombre “\textit{home office}” y es la \ref{fig:smile}.


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{j_smile.png}
  \caption{Selfie en pandemia }
  \label{fig:smile}
\end{figure}

Lo que sigue es reproducir la imagen. Para esto, se hizo uso de un truco: atenuar los colores más claros. Es decir, a partir de un parámetro determinado de escala de luminosidad en adelante se aclarará la escala al máximo valor posible, es decir, 1. Para esta imagen el parámetro elegido es de 0.70.  Esto permitió que la imagen resultara más distinguible, sobre todo en lo que concierne a las facciones faciales: cara, ojos, boca y al implemento electrónico que se tiene sobre las orejas (audífonos). La razón de este recurso puede aclararse si se muestra el resultado de ejecutar el programa sin hacer esta modificación de la luminosidad. Ambos resultados se muestran en los dos pares de imágenes indexados como  \ref{fig:autorretrato Solve0} y \ref{fig:autorretrato Solve1}, respectivamente.


 \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{j_tspSmile.png}
         \caption{Ciudades o puntillismo con imagen \textit{home office}: 9768 ciudades}
         \label{fig:smile00}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{j_citSmile.png}
         \caption{TSP con imagen \textit{home office}: 9768 ciudades}
         \label{fig:smile01}
     \end{subfigure}
     \hfill

    \caption{Puntillismo y TSP para autorretrato (sin agudizar brillos) }
    \label{fig:autorretrato Solve0}
     
\end{figure}


 \begin{figure}[h]
     \centering
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
         \includegraphics[width=\textwidth]{j_citSmile_s.png}
         \caption{Ciudades o puntillismo con imagen \textit{home office} atenuada: 8726 ciudades}
         \label{fig:smile10}
     \end{subfigure}
     \hfill
     \begin{subfigure}[b]{0.4\textwidth}
         \centering
          \includegraphics[width=\textwidth]{j_tspSmile_s.jpeg}
         \caption{TSP con imagen \textit{home office} atenuada: 8726 ciudades}
         \label{fig:smile11}
     \end{subfigure}
     \hfill

    \caption{Puntillismo y TSP para autorretrato (agudizado brillos) }
    \label{fig:autorretrato Solve1}
\end{figure}


Ahora hagamos la instancia del Newton que se mencionó en los apartados del ejercicio de los fotomosaicos. Se reproduce procesando en dimensiones $50 \times 50$. El resultado genera una imagen que se distingue con claridad como una manzana tanto por la forma de la cáscara como por la hoja, acompañada de una figura. La parte del hombre se idenfica según el observador, cuando el escritor preguntó, las respuestas fueron variadas. Algunos empezaron por identificar primero las piernas para luego dilucidar que el resto de ese segmento de imagen es de una figura humana; otros, en tanto, lograron identificar la forma, ya concibiendo el libro que sostiene. Esto, fue tras entrecerrar los ojos. 


\begin{figure} [h]
  \centering
   \includegraphics[width=0.7\linewidth]{newton_cities.jpeg}
  \caption{Ejercicio de Newton con el problema del ajente viajero, versión $50 \times 50$  }
  \label{fig:new_cit}
\end{figure}




\chapter{Conclusiones}\label{chapter:concl}

En el presente trabajo se presentó un aplicación de la optimización en la generación de fotomosaícos. Primero revisando modelos de programación lineal para figuras en escalas de grises, posteriormente con color y por último cómo generar una plantilla para hacer un fotomosaico al resolver un problema del agente viajero que nos dé una tour hamiltoneano que se asemeje a la figura subyacente. Es interesante resaltar que esta aplicación de la optimización es en el ambito del diseño o arte más que en el de decisiones para la gestión empresarial.

Analizamos la manipulación de las escalas de grises, así como en el modelo aditivo de color de tipo RGB para poder darle un valor a las fichas que se van a usar y figuras sobre sobre las cuáles se van a sobreponer, así como para genera la localización de la ciudades a visitar.  Se determinó que la interpretación matricial de las imágenes dan pie a plantear tantos problemas de programación lineal como se puedan idear, dando como resultado hallazgos visibles al ojo humano, apoyados en la creatividad individual del observador. Tanto los fotomosaicos como el TSP para replicar la imagen objetivo son formas creativas de interpretar el arreglo matricial; asimismo, la segmentación de k-medias para obtener un color principal de la imagen resultó una buena aplicación del modelo RGB. En particular la aplicación de fotomosaicos resulta ser interesante desde un punto de vista de marketing para demostrar cómo altera la percepción del observador quien contempla un objeto asociable a una figura. Sin embargo, la concepción y entendimiento de los pixeles como componentes en un espacio matricial da lugar a procesar diversos algoritmos, como la identificación de formas / siluetas, detección de colores, o inclusive se puede extender a archivos de video, detectando patrones de movimiento, como ocurre en los automóviles que detectan proximidad al estacionarse (por dar un ejemplo de la aplicación). Para comprender el marco téorico de los dos tipos de problemas se hizo una revisión general de la programación lineal, de la complejidad que implica pasar de un problema en un espacio continuo de soluciones a uno entero explicando en esta instancia el algoritmo de ramificación y acotamiento; finalmente, se identificó una aplicación de un problema lineal entero donde aún con la ramificación y acotamiento resulta infactible resolver instancias en escalas muy grandes de variables, tal es el caso del problema TSP que requiere de heurísticas para su solución. 

Los programas de R para particionar las imágenes objetivo que se codificaron para este escrito resultaron prácticas y robustas a las dos clases de problemas aborados: fotomosaico y TSP.

Las instancias trabajadas de los fotomosaicos en \textit{grayscales} resultaron efectivas para replicar la imagen objetivo con relativa simplicidad, ya que previamente se generó un \textit{grid} con imágenes promedio con una variedad que aproxima de buena manera al espectro completo de grayscales; sin embargo para la versión a color debió hacerse una selección manual de flores de colores que no abarcan satisfacoriamente el espacio tridimensional. La selección funcionó para el conjunto de imágenes que se determinaron que serían el objetivo, ya que se eligieron mosaicos pensando en generar resultados simples que replicaran la imagen objetivo, como lo fue en los casos de la bandera de México y en la imagen de Newton. En este espacio de tres dimensiones, signfica un reto computacional relevante el crear un \textit{grid} con respectivas imágenes asociadas que satisfaga la variedad exhaustiva que se cumplió en las escalas de grises, donde existían una única dimensión. En contraste con la librería de R especializada, los resultados fueron visiblemente más estéticos, ya que la librería no trabaja un problema de minimización de distancias sobre cada rectángulo, sino de asignación de mosaicos mediante heurísticas de rápida ---no necesariamente eficiente--- solución.

Para el enfoque del TSP se hizo una introducción teórica, pasando por restricciones factibles que mejoran el cómputo en términos de complejidad, así como algoritmos de construcción y mejora de tours, donde existen heurísticas de diseños muy variados y con distintos grados de complejidad y cercanía con el óptimo, explorando la cota de \textit{Held-Karp} que aproxima al óptimo. En lo referente a estas heurísticas de la $TSP$, exhaustivamente estudiadas en el campo de la investigación de operaciones, la reflexión final conduce a balancear el \textit{trade-off} entre economizar tiempo de cómputo por un \textit{software} (hacer que éste sea factible) y la cercanía al óptimo global. Las instancias de TSP, resueltas por el conocido algoritmo de mejora de tours \textit{2-opt}, también resultaron en despliegues con una buena aproximación a las imagenes objetivo incluso ante incrementos de complejidad de los mismos: pasando desde la imagen del logo de Twitter hasta el Newton o el autorretrato. La complejidad de este modelo, no obstante, se demostró en las gráficas correspondientes, con un tiempo de procesamiento que es notablemente más creciente ante cambios en dimensionalidad de rectángulos elegidos que lo que resultó ser en la solución de fotomosaicos. Esto tiene que ver, primero con la restricción de integralidad que sí se tiene en TSP y en los fotomosaicos no, y, segundo con la creciente complejidad inherente al problema de TSP que se refleja en las múltiples restricciones indicadas en el planteamiento y su codificación en la librería de R. Aún con heurísticas o relajación de restricciones para resolverse de manera computacionalmente viable, no puede resolverse de manera más económica. 

Si bien el procesamiento de imágenes como arreglos matriciales trae consigo una amplia de variedad de aplicaciones en múltiples ramas como la ingeniería, la medicina, la industria o el transporte, esta ciencia computacional es válida de aplicarse para producir arreglos estéticos. Como indica Robert Silvers en su obra Photomosaics, los resultados de esta clase de problemas de optimización con un enfoque visual nos da una linda conciliación o \say{matrimonio entre arte y tecnología; de fotografía y las computadoras, de la belleza y la ciencia.}



\begin{thebibliography}{99}

\bibitem{libro1} Silvers, R. (1997). Photomosaics. New York: Henry Holt and Company.


\bibitem{libro2} Cole, S. (2014). Image: NASA releases Earth Day \say{global
selfie} mosaic of our home planet. Isla de Man: PhysOrg.


\bibitem{libro3} Possani, S. (2012). Puentes, agentes viajeros y mosaicos: modelando usando gráficas y programación lineal. Ciudad de México: ITAM.


\bibitem{libro4} Bosch, R. (2004). Constructing Domino Portraits. Ohio: Oberlin College.

\bibitem{libro5} Bosch, R. (2003). Continuous line drawings via the traveling salesman problem. Ohio: Oberlin College.

\bibitem{libro6} Bosch, R. (2006). Opt Art. Ohio: Oberlin College.

\bibitem{libro7} Castañeda, W. (2005). Color. Caldas: Universidad de Caldas.


\bibitem{libro8} Aqil Burney, SM. (2014). K-Means Cluster Analysis for Image Segmentation. Sind: University of Karachi.

\bibitem{libro9} Goic, M. (2009). Análisis  Post  Optimal  y  Algoritmo  de  Ramificación  y Acotamiento. Santiago: Universidad de Chile. 

\bibitem{libro10} Nilsson, C. (2003). Heuristics for the Traveling Salesman Problem. Suecia: Linkoping University.


\bibitem{libro11} Chong, B. (2021). K-means clustering algorithm: a brief review. Shanxi: Academic Journal of Computing \& Information Science, Vol. 4. 

\bibitem{libro12} González-Santander, G. (2020). Tres métodos diferentes para resolver el problema del viajante. Baobab Soluciones. \url{https://baobabsoluciones.es/blog/2020/10/01/problema-del-viajante/#:~:text=El%20problema%20del%20viajante%20(por,Su%20origen%20no%20est%C3%A1%20claro.}

\bibitem{libro13} Fernandez, V; Zelaia, A. (2011). Investigación operativa. Programación lineal. Vizcaya: Universidad del País Vasco. 

\bibitem{libro14} Fraga, A. (2024). Uncalibrated: Drawing, Photography and the Raw Images of Astronomy. Yorkshire del Oeste: The University of Leeds. 

\bibitem{libro15} Desrochers, M; Laporte, G. (1991). Improvements and extensions to the Miller-Tucker-Zemlin subtour elimination constraints. Quebec: Operations Research Letters, Volume 10. 


%https://baobabsoluciones.es/blog/2020/10/01/problema-del-viajante/#:~:text=El%20problema%20del%20viajante%20(por,Su%20origen%20no%20est%C3%A1%20claro. Gonzalez-Santander


%Investigación operativa. Programación lineal, [2011/06] [cas]. Autora: Fernández González, Victoria; Zelaia Jauregi, Ana. UPV/EHU ... https://www.google.com/search?q=investigacion+operativa+programacion+lineal+ocw&sca_esv=c40def4ba69778d6&rlz=1C1CHZN_esMX1008MX1008&sxsrf=AHTn8zrh8u-H5PKrl-d7qbz0s5qFkFLOFg%3A1742518266486&ei=-rfcZ8ywHeOz0PEPnPfl0Ac&ved=0ahUKEwjMlaey-pmMAxXjGTQIHZx7GXoQ4dUDCBA&uact=5&oq=investigacion+operativa+programacion+lineal+ocw&gs_lp=Egxnd3Mtd2l6LXNlcnAiL2ludmVzdGlnYWNpb24gb3BlcmF0aXZhIHByb2dyYW1hY2lvbiBsaW5lYWwgb2N3MgUQIRigATIFECEYoAEyBRAhGKABMgUQIRigATIEECEYFUiZGlCoEFjIGXAFeAGQAQCYAfIBoAHvBaoBBTAuMy4xuAEDyAEA-AEBmAIJoAKbBsICChAAGLADGNYEGEfCAgYQABgWGB7CAggQABiABBiiBMICBRAAGO8FmAMAiAYBkAYIkgcFNS4zLjGgB-UVsgcFMC4zLjG4B4IG&sclient=gws-wiz-serp


\end{thebibliography}



\chapter{Apéndice}

\section{Adecuando largo y ancho de pixeles para adapatarse a parámetros ingresados}\label{reshp}

Para la regla de asignación consistente en hacer la $\mu'$ múliplo de $m$ y $nu$ múltiplo de $n$ se requiere que la cantidad de renglones de la nueva matriz acotada sea $0$ módulo $m$ y, la cantidad de columnas, $0$ módulo $n$. Si bien puede haber más de una combinación renglón $\times$ columna consistente con las propiedades mencionadas, para nuestra regla de recortar la matriz mayor se escogerá una nueva dimensión $\mu' \times \nu'$ que corresponda al máximo valor factible que no exceda $\mu \times \nu$.  

\begin{equation} \label{dimensiones} 
DIM = \{ (\mu', \nu') = (max(a), max(b)) | 0=a mod(m), 0=b mod(n), a \in [0,\mu] \cap \mathbb{N},  b \in [0,\nu] \cap \mathbb{N} \}
\end{equation}


Es trivial notar que se requiere que $m \leq \mu$ y  $n \leq \nu$. El acotamiento arriba expresado se realiza de la manera más simétrica posible. Esto es, si $\mu' < \mu$, se recortarán $\epsilon= \floor{   \frac{1}{2}(\mu - \mu') }$ renglones por arriba y $\delta = (\mu - \mu ')- \epsilon$ renglones por abajo . Así, se tendrá $\epsilon - \delta \in \{0, 1 \}$ ($0$ si $\frac{1}{2}(\mu - \mu')$ es par, $1$ e.o.c), lo cual quiere decir que, en el peor caso, se recortará un pixel más por un lado que por otro. Análogamente, si $\nu' < \nu$, se recortarán $\rho= \floor{   \frac{1}{2}(\nu - \nu') }$ columnas por la izquierda y $\sigma = (\nu - \nu ')- \rho$ por la derecha (siendo también la diferencia de, a lo mucho, uno). 

\section{Reduciendo dimensionalidad del vector de costos}

La forma genérica que ayuda a convertir el arreglo $3$-dimensional de costos en los fotomosaicos en uno de $2$ se muestra a continuación


\begingroup
%\setlength{\tabcolsep}{0.75pt} % Default value: 6pt
\renewcommand{\arraystretch}{0.6} % Default value: 1

\begin{center}
%\setlength\tabcolsep{1.5pt}
%\renewcommand{\arraystretch}{1.2}

\begin{tabular}{c*{6}{c}r}
%\renewcommand{\arraystretch}{1}
t & f & i & j & costo ($ce$)  \\
\hline
1 & 1 & 1 & 1 & A[1,1,1]   \\
2 & 1 & 1 & 2 & A[1,1,2]   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
n & 1 & 1 & n & A[1,1,n]   \\
n+1 & 1 & 2 & 1 & A[1,2,1]   \\
n+2 & 1 & 2 & 2 & A[1,2,2]\\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
2n & 1 & 2 & n & A[1,2,n]   \\
%. & . & . & . & .   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
(m-1)n+1 & 1 & m & 1 & A[1,m,1]   \\
(m-1)n+2  & 1 & m & 2 & A[1,m,2]\\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
mn & 1 & m & n & A[1,m,n]   \\


mn+1 & 2 & 1 & 1 & A[2,1,1]   \\
mn+2 & 2 & 1 & 2 & A[2,1,2]   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
mn+n & 2 & 1 & n & A[2,1,n]   \\
mn+n+1 & 2 & 2 & 1 & A[2,2,1]   \\
mn+n+2 & 2 & 2 & 2 & A[2,2,2]   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
mn+2n & 2 & 2 & n & A[2,2,n]\\
%. & . & . & . & .   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
mn+(m-1)n+1 & 2 & m & 1 & A[2,m,1]   \\
mn+(m-1)n+2  & 2 & m & 2 & A[2,m,2]   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\
2mn & 2 & m & n & A[2,m,n]   \\

%. & . & . & . & .   \\
%. & . & . & . & .   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\


(cf-1)mn+1 & cf & 1 & 1 & A[cf,1,1]   \\
(cf-1)mn+2 & cf & 1 & 2 & A[cf,1,2]  \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\

(cf-1)mn+n & cf & 1 & n & A[cf,1,n]   \\
(cf-1)mn+n+1 & cf & 2 & 1 & A[cf,2,1]   \\
(cf-1)mn+n+2 & cf & 2 & 2 & A[cf,2,2]   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\

(cf-1)mn+2n & cf & 2 & n & A[cf,2,n]   \\
%. & . & . & . & .   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\

(cf-1)mn+(m-1)n+1 & cf & m & 1 & A[cf,m,1]   \\
(cf-1)mn+(m-1)n+2  & cf & m & 2 & A[cf,m,2]   \\
%. & . & . & . & .   \\
\vdots  & \vdots  & \vdots  & \vdots  & \vdots    \\

m\;n\;cf & cf & m & n &  A[cf,m,n]
\end{tabular}
\end{center}
\endgroup


Como se muestra, el ordenamiento de $df3$ sigue la jerarquía $f,i,j$. 

La estructura descrita redefine el problema, para este caso, pasando de uno sobre variables de decisión indexadas sobre tres componentes $x_{fij}$ a su análogo $1$-dimensional, $x_{t}$. El ejercicio requiere de una reasignación $(f, i, j) \mapsto t(f, i, j)$ definida por $t=(f-1) \;(m \;n) + m(i-1)+j$ que representa el orden de los renglones que sigue $df3$. Ahora, defínanse en $R$ los parámetros requeridos en el párrafo anterior



\begin{enumerate}
%[label=(\alph*)]

\item $ce=df3[\say{costo}]$
\item $io=\say{min}$
\item Restricciones $RM \in \mathbb{R}^{re \times m \; n \; cf}$ con $re=cf+m\;n$, los primeros $cf$ renglones representando a las restricciones de disponibilidad de los mosaicos que hay, y las restricciones restantes representando el correcto llenado de cada celda genérica $(i, j)$. La matriz consta únicamente de valores $0$ y $1$. Los $1$'s se asignan facilmente conociendo, con la ayuda de la asginación $t( \period )$ qué posiciones corresponden a cada $f$ para el primer conjunto de restricciones; similarmente, para el segundo conjunto de restricciones basta reconocer qué posiciones le corresponden a cada celda $(i,j)$. 

\item $rh_{f}=u_{f} \; \forall f \in \{1, \dots , cf\}$

$rh_{t}=1 \;  \forall f \in \{cf+1, \dots , cf+m\;n\}$

\item $sign_{f}=\say{\leq} \; \forall f \in \{1, \dots , cf\}$

$sign_{t}=\say{=} \;  \forall f \in \{cf+1, \dots , cf+m\;n\}$

\end{enumerate}

%\chapter*{Bibliografía}

\addcontentsline{toc}{chapter}{Bibliografía}
\include{Referencias/Biblio}



%----------------------------------------------------------------------------------------
%	APÉNDICES
%----------------------------------------------------------------------------------------

\begin{appendix}

\include{Apendices/ApA}

%----------------------------------------------------------------------------------------
%	ÍNDICE DE CUADROS Y FIGURAS
%---------------------------------------------------------------------------------------

\listoftables

\listoffigures

\end{appendix}

%----------------------------------------------------------------------------------------
%	Last page
%----------------------------------------------------------------------------------------

\newpage
\thispagestyle{empty}
\begin{table}[p]
\centering
\small
\label{ed}
\begin{tabular}{c}
\textit{Foto-mosaicos }\\ 
\textit{y optimización para el arte (Opt-Art)}\\ escrito por Julio César Espinosa León,\\ se terminó de imprimir en marzo de 2025\\ en los talleres de Tesis Martínez.\\ República de Cuba 99, colonia Centro,\\ Ciudad de México.
\end{tabular}
\end{table}

% Si lo prefieren, avisen a su taller que esta página ya la incluyeron ustedes para que no les impriman las que ellos usan. Lo recomiendo ampliamente

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{document}
